
LED Tower Defense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000f6e  00001002  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b2  008001c4  008001c4  000010c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bee  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b69  00000000  00000000  00002e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d44  00000000  00000000  00003997  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000046dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5b  00000000  00000000  00004958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f07  00000000  00000000  000053b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000062ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	2b c2       	rjmp	.+1110   	; 0x48c <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8b 01       	movw	r16, r22
  8e:	74 00       	.word	0x0074	; ????
  90:	94 00       	.word	0x0094	; ????
  92:	8b 01       	movw	r16, r22
  94:	9d 00       	.word	0x009d	; ????
  96:	8b 01       	movw	r16, r22
  98:	a7 00       	.word	0x00a7	; ????
  9a:	8b 01       	movw	r16, r22

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ee e6       	ldi	r30, 0x6E	; 110
  b0:	ff e0       	ldi	r31, 0x0F	; 15
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 3c       	cpi	r26, 0xC4	; 196
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	a4 ec       	ldi	r26, 0xC4	; 196
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a6 37       	cpi	r26, 0x76	; 118
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	30 d5       	rcall	.+2656   	; 0xb34 <main>
  d4:	4a c7       	rjmp	.+3732   	; 0xf6a <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <selTurTick>:
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
}
  d8:	88 30       	cpi	r24, 0x08	; 8
  da:	91 05       	cpc	r25, r1
  dc:	08 f0       	brcs	.+2      	; 0xe0 <selTurTick+0x8>
  de:	41 c0       	rjmp	.+130    	; 0x162 <selTurTick+0x8a>
  e0:	fc 01       	movw	r30, r24
  e2:	ea 5b       	subi	r30, 0xBA	; 186
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	f3 c6       	rjmp	.+3558   	; 0xece <__tablejump2__>
  e8:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <C2>
  ec:	22 23       	and	r18, r18
  ee:	31 f0       	breq	.+12     	; 0xfc <selTurTick+0x24>
  f0:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <inGame>
  f4:	22 23       	and	r18, r18
  f6:	09 f4       	brne	.+2      	; 0xfa <selTurTick+0x22>
  f8:	11 c1       	rjmp	.+546    	; 0x31c <selTurTick+0x244>
  fa:	08 95       	ret
  fc:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <C3>
 100:	22 23       	and	r18, r18
 102:	31 f0       	breq	.+12     	; 0x110 <selTurTick+0x38>
 104:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <inGame>
 108:	22 23       	and	r18, r18
 10a:	09 f4       	brne	.+2      	; 0x10e <selTurTick+0x36>
 10c:	0a c1       	rjmp	.+532    	; 0x322 <selTurTick+0x24a>
 10e:	08 95       	ret
 110:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <C4>
 114:	22 23       	and	r18, r18
 116:	09 f4       	brne	.+2      	; 0x11a <selTurTick+0x42>
 118:	06 c1       	rjmp	.+524    	; 0x326 <selTurTick+0x24e>
 11a:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <inGame>
 11e:	21 11       	cpse	r18, r1
 120:	02 c1       	rjmp	.+516    	; 0x326 <selTurTick+0x24e>
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	08 95       	ret
 128:	20 91 5a 02 	lds	r18, 0x025A	; 0x80025a <C2>
 12c:	21 11       	cpse	r18, r1
 12e:	fb c0       	rjmp	.+502    	; 0x326 <selTurTick+0x24e>
 130:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <inGame>
 134:	22 23       	and	r18, r18
 136:	09 f1       	breq	.+66     	; 0x17a <selTurTick+0xa2>
 138:	08 95       	ret
 13a:	20 91 54 02 	lds	r18, 0x0254	; 0x800254 <C3>
 13e:	21 11       	cpse	r18, r1
 140:	f2 c0       	rjmp	.+484    	; 0x326 <selTurTick+0x24e>
 142:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <inGame>
 146:	22 23       	and	r18, r18
 148:	09 f4       	brne	.+2      	; 0x14c <selTurTick+0x74>
 14a:	59 c0       	rjmp	.+178    	; 0x1fe <selTurTick+0x126>
 14c:	08 95       	ret
 14e:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <C4>
 152:	21 11       	cpse	r18, r1
 154:	e8 c0       	rjmp	.+464    	; 0x326 <selTurTick+0x24e>
 156:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <inGame>
 15a:	22 23       	and	r18, r18
 15c:	09 f4       	brne	.+2      	; 0x160 <selTurTick+0x88>
 15e:	91 c0       	rjmp	.+290    	; 0x282 <selTurTick+0x1aa>
 160:	08 95       	ret
 162:	85 30       	cpi	r24, 0x05	; 5
 164:	91 05       	cpc	r25, r1
 166:	09 f4       	brne	.+2      	; 0x16a <selTurTick+0x92>
 168:	4a c0       	rjmp	.+148    	; 0x1fe <selTurTick+0x126>
 16a:	87 30       	cpi	r24, 0x07	; 7
 16c:	91 05       	cpc	r25, r1
 16e:	09 f4       	brne	.+2      	; 0x172 <selTurTick+0x9a>
 170:	88 c0       	rjmp	.+272    	; 0x282 <selTurTick+0x1aa>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	91 05       	cpc	r25, r1
 176:	09 f0       	breq	.+2      	; 0x17a <selTurTick+0xa2>
 178:	d6 c0       	rjmp	.+428    	; 0x326 <selTurTick+0x24e>
 17a:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <t>
 17e:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <t+0x1>
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	e0 50       	subi	r30, 0x00	; 0
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	01 90       	ld	r0, Z+
 18c:	f0 81       	ld	r31, Z
 18e:	e0 2d       	mov	r30, r0
 190:	84 e1       	ldi	r24, 0x14	; 20
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	91 83       	std	Z+1, r25	; 0x01
 196:	80 83       	st	Z, r24
 198:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <gold>
 19c:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <gold+0x1>
 1a0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <t>
 1a4:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <t+0x1>
 1a8:	fc 01       	movw	r30, r24
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	e0 50       	subi	r30, 0x00	; 0
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	01 90       	ld	r0, Z+
 1b4:	f0 81       	ld	r31, Z
 1b6:	e0 2d       	mov	r30, r0
 1b8:	40 81       	ld	r20, Z
 1ba:	51 81       	ldd	r21, Z+1	; 0x01
 1bc:	24 17       	cp	r18, r20
 1be:	35 07       	cpc	r19, r21
 1c0:	08 f4       	brcc	.+2      	; 0x1c4 <selTurTick+0xec>
 1c2:	a0 c0       	rjmp	.+320    	; 0x304 <selTurTick+0x22c>
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	42 83       	std	Z+2, r20	; 0x02
 1c8:	40 e1       	ldi	r20, 0x10	; 16
 1ca:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <outgoingByte>
 1ce:	fc 01       	movw	r30, r24
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	01 90       	ld	r0, Z+
 1da:	f0 81       	ld	r31, Z
 1dc:	e0 2d       	mov	r30, r0
 1de:	40 81       	ld	r20, Z
 1e0:	51 81       	ldd	r21, Z+1	; 0x01
 1e2:	24 1b       	sub	r18, r20
 1e4:	35 0b       	sbc	r19, r21
 1e6:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <gold+0x1>
 1ea:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <gold>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <t+0x1>
 1f4:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <t>
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret
 1fe:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <t>
 202:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <t+0x1>
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	e0 50       	subi	r30, 0x00	; 0
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	01 90       	ld	r0, Z+
 210:	f0 81       	ld	r31, Z
 212:	e0 2d       	mov	r30, r0
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	91 83       	std	Z+1, r25	; 0x01
 21a:	80 83       	st	Z, r24
 21c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <gold>
 220:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <gold+0x1>
 224:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <t>
 228:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <t+0x1>
 22c:	fc 01       	movw	r30, r24
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	e0 50       	subi	r30, 0x00	; 0
 234:	ff 4f       	sbci	r31, 0xFF	; 255
 236:	01 90       	ld	r0, Z+
 238:	f0 81       	ld	r31, Z
 23a:	e0 2d       	mov	r30, r0
 23c:	40 81       	ld	r20, Z
 23e:	51 81       	ldd	r21, Z+1	; 0x01
 240:	24 17       	cp	r18, r20
 242:	35 07       	cpc	r19, r21
 244:	08 f4       	brcc	.+2      	; 0x248 <selTurTick+0x170>
 246:	61 c0       	rjmp	.+194    	; 0x30a <selTurTick+0x232>
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	42 83       	std	Z+2, r20	; 0x02
 24c:	40 e2       	ldi	r20, 0x20	; 32
 24e:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <outgoingByte>
 252:	fc 01       	movw	r30, r24
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	e0 50       	subi	r30, 0x00	; 0
 25a:	ff 4f       	sbci	r31, 0xFF	; 255
 25c:	01 90       	ld	r0, Z+
 25e:	f0 81       	ld	r31, Z
 260:	e0 2d       	mov	r30, r0
 262:	40 81       	ld	r20, Z
 264:	51 81       	ldd	r21, Z+1	; 0x01
 266:	24 1b       	sub	r18, r20
 268:	35 0b       	sbc	r19, r21
 26a:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <gold+0x1>
 26e:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <gold>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <t+0x1>
 278:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <t>
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 95       	ret
 282:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <t>
 286:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <t+0x1>
 28a:	ee 0f       	add	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	e0 50       	subi	r30, 0x00	; 0
 290:	ff 4f       	sbci	r31, 0xFF	; 255
 292:	01 90       	ld	r0, Z+
 294:	f0 81       	ld	r31, Z
 296:	e0 2d       	mov	r30, r0
 298:	8c e3       	ldi	r24, 0x3C	; 60
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
 2a0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <gold>
 2a4:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <gold+0x1>
 2a8:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <t>
 2ac:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <t+0x1>
 2b0:	fc 01       	movw	r30, r24
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	e0 50       	subi	r30, 0x00	; 0
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	01 90       	ld	r0, Z+
 2bc:	f0 81       	ld	r31, Z
 2be:	e0 2d       	mov	r30, r0
 2c0:	40 81       	ld	r20, Z
 2c2:	51 81       	ldd	r21, Z+1	; 0x01
 2c4:	24 17       	cp	r18, r20
 2c6:	35 07       	cpc	r19, r21
 2c8:	18 f1       	brcs	.+70     	; 0x310 <selTurTick+0x238>
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	42 83       	std	Z+2, r20	; 0x02
 2ce:	40 e3       	ldi	r20, 0x30	; 48
 2d0:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <outgoingByte>
 2d4:	fc 01       	movw	r30, r24
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	e0 50       	subi	r30, 0x00	; 0
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	01 90       	ld	r0, Z+
 2e0:	f0 81       	ld	r31, Z
 2e2:	e0 2d       	mov	r30, r0
 2e4:	40 81       	ld	r20, Z
 2e6:	51 81       	ldd	r21, Z+1	; 0x01
 2e8:	24 1b       	sub	r18, r20
 2ea:	35 0b       	sbc	r19, r21
 2ec:	30 93 23 01 	sts	0x0123, r19	; 0x800123 <gold+0x1>
 2f0:	20 93 22 01 	sts	0x0122, r18	; 0x800122 <gold>
 2f4:	01 96       	adiw	r24, 0x01	; 1
 2f6:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <t+0x1>
 2fa:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <t>
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	08 95       	ret
 30a:	85 e0       	ldi	r24, 0x05	; 5
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	08 95       	ret
 310:	87 e0       	ldi	r24, 0x07	; 7
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	08 95       	ret
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	08 95       	ret
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	08 95       	ret
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	08 95       	ret

00000328 <pulseForEnemyLEDTick>:
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	91 05       	cpc	r25, r1
 32c:	51 f0       	breq	.+20     	; 0x342 <pulseForEnemyLEDTick+0x1a>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	91 05       	cpc	r25, r1
 332:	81 f0       	breq	.+32     	; 0x354 <pulseForEnemyLEDTick+0x2c>
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	89 f4       	brne	.+34     	; 0x35a <pulseForEnemyLEDTick+0x32>
 338:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <inGame>
 33c:	81 11       	cpse	r24, r1
 33e:	1a c0       	rjmp	.+52     	; 0x374 <pulseForEnemyLEDTick+0x4c>
 340:	14 c0       	rjmp	.+40     	; 0x36a <pulseForEnemyLEDTick+0x42>
 342:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <inGame>
 346:	88 23       	and	r24, r24
 348:	81 f0       	breq	.+32     	; 0x36a <pulseForEnemyLEDTick+0x42>
 34a:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <pulseCount>
 34e:	83 30       	cpi	r24, 0x03	; 3
 350:	c8 f4       	brcc	.+50     	; 0x384 <pulseForEnemyLEDTick+0x5c>
 352:	10 c0       	rjmp	.+32     	; 0x374 <pulseForEnemyLEDTick+0x4c>
 354:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <pulseCount>
 358:	0d c0       	rjmp	.+26     	; 0x374 <pulseForEnemyLEDTick+0x4c>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	91 05       	cpc	r25, r1
 35e:	51 f0       	breq	.+20     	; 0x374 <pulseForEnemyLEDTick+0x4c>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	91 05       	cpc	r25, r1
 364:	79 f0       	breq	.+30     	; 0x384 <pulseForEnemyLEDTick+0x5c>
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	91 f4       	brne	.+36     	; 0x38e <pulseForEnemyLEDTick+0x66>
 36a:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <pulseCount>
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret
 374:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <pulseCount>
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <pulseCount>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	08 95       	ret
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	08 95       	ret

00000390 <delay_ms>:
 390:	18 16       	cp	r1, r24
 392:	19 06       	cpc	r1, r25
 394:	5c f0       	brlt	.+22     	; 0x3ac <delay_ms+0x1c>
 396:	08 95       	ret
 398:	00 00       	nop
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	31 09       	sbc	r19, r1
 39e:	e1 f7       	brne	.-8      	; 0x398 <delay_ms+0x8>
 3a0:	4f 5f       	subi	r20, 0xFF	; 255
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
 3a4:	48 17       	cp	r20, r24
 3a6:	59 07       	cpc	r21, r25
 3a8:	29 f4       	brne	.+10     	; 0x3b4 <delay_ms+0x24>
 3aa:	08 95       	ret
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	77 e0       	ldi	r23, 0x07	; 7
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	27 2f       	mov	r18, r23
 3b6:	36 2f       	mov	r19, r22
 3b8:	ef cf       	rjmp	.-34     	; 0x398 <delay_ms+0x8>

000003ba <LCD_WriteCommand>:
 3ba:	5c 98       	cbi	0x0b, 4	; 11
 3bc:	85 b9       	out	0x05, r24	; 5
 3be:	5d 9a       	sbi	0x0b, 5	; 11
 3c0:	00 00       	nop
 3c2:	5d 98       	cbi	0x0b, 5	; 11
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	e3 cf       	rjmp	.-58     	; 0x390 <delay_ms>
 3ca:	08 95       	ret

000003cc <LCD_ClearScreen>:
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	f5 cf       	rjmp	.-22     	; 0x3ba <LCD_WriteCommand>
 3d0:	08 95       	ret

000003d2 <LCD_Cursor>:
 3d2:	81 31       	cpi	r24, 0x11	; 17
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <LCD_Cursor+0xa>
 3d6:	81 58       	subi	r24, 0x81	; 129
 3d8:	f0 cf       	rjmp	.-32     	; 0x3ba <LCD_WriteCommand>
 3da:	08 95       	ret
 3dc:	81 55       	subi	r24, 0x51	; 81
 3de:	ed cf       	rjmp	.-38     	; 0x3ba <LCD_WriteCommand>
 3e0:	08 95       	ret

000003e2 <LCD_init>:
 3e2:	84 e6       	ldi	r24, 0x64	; 100
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	d4 df       	rcall	.-88     	; 0x390 <delay_ms>
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	e7 df       	rcall	.-50     	; 0x3ba <LCD_WriteCommand>
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	e5 df       	rcall	.-54     	; 0x3ba <LCD_WriteCommand>
 3f0:	8f e0       	ldi	r24, 0x0F	; 15
 3f2:	e3 df       	rcall	.-58     	; 0x3ba <LCD_WriteCommand>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	e1 df       	rcall	.-62     	; 0x3ba <LCD_WriteCommand>
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	c9 cf       	rjmp	.-110    	; 0x390 <delay_ms>
 3fe:	08 95       	ret

00000400 <LCD_WriteData>:
 400:	5c 9a       	sbi	0x0b, 4	; 11
 402:	85 b9       	out	0x05, r24	; 5
 404:	5d 9a       	sbi	0x0b, 5	; 11
 406:	00 00       	nop
 408:	5d 98       	cbi	0x0b, 5	; 11
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	c0 cf       	rjmp	.-128    	; 0x390 <delay_ms>
 410:	08 95       	ret

00000412 <LCD_DisplayString>:
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	18 2f       	mov	r17, r24
 41c:	eb 01       	movw	r28, r22
 41e:	d6 df       	rcall	.-84     	; 0x3cc <LCD_ClearScreen>
 420:	88 81       	ld	r24, Y
 422:	88 23       	and	r24, r24
 424:	51 f0       	breq	.+20     	; 0x43a <LCD_DisplayString+0x28>
 426:	01 e0       	ldi	r16, 0x01	; 1
 428:	01 0f       	add	r16, r17
 42a:	81 2f       	mov	r24, r17
 42c:	d2 df       	rcall	.-92     	; 0x3d2 <LCD_Cursor>
 42e:	89 91       	ld	r24, Y+
 430:	e7 df       	rcall	.-50     	; 0x400 <LCD_WriteData>
 432:	10 2f       	mov	r17, r16
 434:	88 81       	ld	r24, Y
 436:	81 11       	cpse	r24, r1
 438:	f6 cf       	rjmp	.-20     	; 0x426 <LCD_DisplayString+0x14>
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	1f 91       	pop	r17
 440:	0f 91       	pop	r16
 442:	08 95       	ret

00000444 <TimerOn>:
 444:	8b e0       	ldi	r24, 0x0B	; 11
 446:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 44a:	8d e7       	ldi	r24, 0x7D	; 125
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 452:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 45c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 460:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 464:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_avr_timer_M>
 468:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_avr_timer_M+0x1>
 46c:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <_avr_timer_M+0x2>
 470:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <_avr_timer_M+0x3>
 474:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <_avr_timer_cntcurr>
 478:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <_avr_timer_cntcurr+0x1>
 47c:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <_avr_timer_cntcurr+0x2>
 480:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <_avr_timer_cntcurr+0x3>
 484:	8f b7       	in	r24, 0x3f	; 63
 486:	80 68       	ori	r24, 0x80	; 128
 488:	8f bf       	out	0x3f, r24	; 63
 48a:	08 95       	ret

0000048c <__vector_13>:
 48c:	1f 92       	push	r1
 48e:	0f 92       	push	r0
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	0f 92       	push	r0
 494:	11 24       	eor	r1, r1
 496:	8f 93       	push	r24
 498:	9f 93       	push	r25
 49a:	af 93       	push	r26
 49c:	bf 93       	push	r27
 49e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <_avr_timer_cntcurr>
 4a2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <_avr_timer_cntcurr+0x1>
 4a6:	a0 91 3a 02 	lds	r26, 0x023A	; 0x80023a <_avr_timer_cntcurr+0x2>
 4aa:	b0 91 3b 02 	lds	r27, 0x023B	; 0x80023b <_avr_timer_cntcurr+0x3>
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	a1 09       	sbc	r26, r1
 4b2:	b1 09       	sbc	r27, r1
 4b4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <_avr_timer_cntcurr>
 4b8:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <_avr_timer_cntcurr+0x1>
 4bc:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <_avr_timer_cntcurr+0x2>
 4c0:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <_avr_timer_cntcurr+0x3>
 4c4:	89 2b       	or	r24, r25
 4c6:	8a 2b       	or	r24, r26
 4c8:	8b 2b       	or	r24, r27
 4ca:	99 f4       	brne	.+38     	; 0x4f2 <__vector_13+0x66>
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <TimerFlag>
 4d2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <_avr_timer_M>
 4d6:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <_avr_timer_M+0x1>
 4da:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <_avr_timer_M+0x2>
 4de:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <_avr_timer_M+0x3>
 4e2:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <_avr_timer_cntcurr>
 4e6:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <_avr_timer_cntcurr+0x1>
 4ea:	a0 93 3a 02 	sts	0x023A, r26	; 0x80023a <_avr_timer_cntcurr+0x2>
 4ee:	b0 93 3b 02 	sts	0x023B, r27	; 0x80023b <_avr_timer_cntcurr+0x3>
 4f2:	bf 91       	pop	r27
 4f4:	af 91       	pop	r26
 4f6:	9f 91       	pop	r25
 4f8:	8f 91       	pop	r24
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <initUSART>:
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	81 f0       	breq	.+32     	; 0x528 <initUSART+0x24>
 508:	e1 ec       	ldi	r30, 0xC1	; 193
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	88 61       	ori	r24, 0x18	; 24
 510:	80 83       	st	Z, r24
 512:	e2 ec       	ldi	r30, 0xC2	; 194
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	80 81       	ld	r24, Z
 518:	86 60       	ori	r24, 0x06	; 6
 51a:	80 83       	st	Z, r24
 51c:	83 e3       	ldi	r24, 0x33	; 51
 51e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 522:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 526:	08 95       	ret
 528:	e9 ec       	ldi	r30, 0xC9	; 201
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	88 61       	ori	r24, 0x18	; 24
 530:	80 83       	st	Z, r24
 532:	ea ec       	ldi	r30, 0xCA	; 202
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	86 60       	ori	r24, 0x06	; 6
 53a:	80 83       	st	Z, r24
 53c:	83 e3       	ldi	r24, 0x33	; 51
 53e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 542:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 546:	08 95       	ret

00000548 <USART_Flush>:
//Parameter: usartNum specifies which USART is flushed
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
 548:	81 30       	cpi	r24, 0x01	; 1
 54a:	29 f4       	brne	.+10     	; 0x556 <USART_Flush+0xe>
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 54c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 550:	88 23       	and	r24, r24
 552:	84 f0       	brlt	.+32     	; 0x574 <USART_Flush+0x2c>
 554:	08 95       	ret
//Returns: None
void USART_Flush(unsigned char usartNum)
{
	static unsigned char dummy;
	if (usartNum != 1) {
		while ( UCSR0A & (1 << RXC0) ) { dummy = UDR0; }
 556:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 55a:	88 23       	and	r24, r24
 55c:	ac f4       	brge	.+42     	; 0x588 <USART_Flush+0x40>
 55e:	a6 ec       	ldi	r26, 0xC6	; 198
 560:	b0 e0       	ldi	r27, 0x00	; 0
 562:	e0 ec       	ldi	r30, 0xC0	; 192
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	8c 91       	ld	r24, X
 568:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <dummy.1784>
 56c:	80 81       	ld	r24, Z
 56e:	88 23       	and	r24, r24
 570:	d4 f3       	brlt	.-12     	; 0x566 <USART_Flush+0x1e>
 572:	08 95       	ret
	}
	else {
		while ( UCSR1A & (1 << RXC1) ) { dummy = UDR1; }
 574:	ae ec       	ldi	r26, 0xCE	; 206
 576:	b0 e0       	ldi	r27, 0x00	; 0
 578:	e8 ec       	ldi	r30, 0xC8	; 200
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	8c 91       	ld	r24, X
 57e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <dummy.1784>
 582:	80 81       	ld	r24, Z
 584:	88 23       	and	r24, r24
 586:	d4 f3       	brlt	.-12     	; 0x57c <USART_Flush+0x34>
 588:	08 95       	ret

0000058a <USART_Send>:
//Parameter: Takes a single unsigned char value
//			 usartNum specifies which USART will send the char
//Returns: None
void USART_Send(unsigned char sendMe, unsigned char usartNum)
{
	if (usartNum != 1) {
 58a:	61 30       	cpi	r22, 0x01	; 1
 58c:	41 f0       	breq	.+16     	; 0x59e <USART_Send+0x14>
		while( !(UCSR0A & (1 << UDRE0)) );
 58e:	e0 ec       	ldi	r30, 0xC0	; 192
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	90 81       	ld	r25, Z
 594:	95 ff       	sbrs	r25, 5
 596:	fd cf       	rjmp	.-6      	; 0x592 <USART_Send+0x8>
		UDR0 = sendMe;
 598:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 59c:	08 95       	ret
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
 59e:	e8 ec       	ldi	r30, 0xC8	; 200
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	90 81       	ld	r25, Z
 5a4:	95 ff       	sbrs	r25, 5
 5a6:	fd cf       	rjmp	.-6      	; 0x5a2 <USART_Send+0x18>
		UDR1 = sendMe;
 5a8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 5ac:	08 95       	ret

000005ae <usartSMTick>:
}

enum usartSM_States{usartSM_init, usartSM_check0};

int usartSMTick(int state){
	switch(state){
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	91 05       	cpc	r25, r1
 5b2:	18 f0       	brcs	.+6      	; 0x5ba <usartSMTick+0xc>
		case usartSM_init: state = usartSM_check0; break;
		case usartSM_check0: state = usartSM_check0; break;
	}
	switch(state){
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	91 f4       	brne	.+36     	; 0x5de <usartSMTick+0x30>
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 5ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case usartSM_check0:
			/*if(USART_HasReceived(0)){
				receivedByte = USART_Receive(0);
				USART_Flush(0);
			}*/
			if(USART_IsSendReady(0)){ //if the USART is ready
 5be:	85 ff       	sbrs	r24, 5
 5c0:	0c c0       	rjmp	.+24     	; 0x5da <usartSMTick+0x2c>
				USART_Send(outgoingByte, 0); //send USART 0
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <outgoingByte>
 5c8:	e0 df       	rcall	.-64     	; 0x58a <USART_Send>
				outgoingByte &= 0x80; //Reset bits 0-6 after being sent. Keep track of 7th bit to see if inGame
 5ca:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <outgoingByte>
 5ce:	80 78       	andi	r24, 0x80	; 128
 5d0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	08 95       	ret
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
	}
	return state;
}
 5de:	08 95       	ret

000005e0 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	41 f0       	breq	.+16     	; 0x5f4 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 5e4:	e0 ec       	ldi	r30, 0xC0	; 192
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	88 23       	and	r24, r24
 5ec:	ec f7       	brge	.-6      	; 0x5e8 <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 5ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 5f2:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 5f4:	e8 ec       	ldi	r30, 0xC8	; 200
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	80 81       	ld	r24, Z
 5fa:	88 23       	and	r24, r24
 5fc:	ec f7       	brge	.-6      	; 0x5f8 <USART_Receive+0x18>
		return UDR1;
 5fe:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 602:	08 95       	ret

00000604 <enemySMTick>:

unsigned char spawnedEnemies, enemyCount, timeCount;
enum enemySM{enemy_init, enemy_wait, enemy_C0Press, enemy_spawn, enemy_spawnWait, enemy_levelComplete};

int enemySMTick(int state){
	switch(state){ //Transitions
 604:	82 30       	cpi	r24, 0x02	; 2
 606:	91 05       	cpc	r25, r1
 608:	01 f1       	breq	.+64     	; 0x64a <enemySMTick+0x46>
 60a:	34 f4       	brge	.+12     	; 0x618 <enemySMTick+0x14>
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	69 f0       	breq	.+26     	; 0x62a <enemySMTick+0x26>
 610:	81 30       	cpi	r24, 0x01	; 1
 612:	91 05       	cpc	r25, r1
 614:	a9 f0       	breq	.+42     	; 0x640 <enemySMTick+0x3c>
 616:	32 c0       	rjmp	.+100    	; 0x67c <enemySMTick+0x78>
 618:	84 30       	cpi	r24, 0x04	; 4
 61a:	91 05       	cpc	r25, r1
 61c:	51 f1       	breq	.+84     	; 0x672 <enemySMTick+0x6e>
 61e:	ec f0       	brlt	.+58     	; 0x65a <enemySMTick+0x56>
 620:	85 30       	cpi	r24, 0x05	; 5
 622:	91 05       	cpc	r25, r1
 624:	09 f4       	brne	.+2      	; 0x628 <enemySMTick+0x24>
 626:	b9 c0       	rjmp	.+370    	; 0x79a <enemySMTick+0x196>
 628:	29 c0       	rjmp	.+82     	; 0x67c <enemySMTick+0x78>
		case enemy_init:
			spawnedEnemies = -1; //Initialize values in "transitions"
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spawnedEnemies>
			enemyCount = 5; //"timeCount" won't be set if initialized in "actions"
 630:	85 e0       	ldi	r24, 0x05	; 5
 632:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <enemyCount>
			timeCount = 0;
 636:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <timeCount>
			state = enemy_wait; 
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	90 e0       	ldi	r25, 0x00	; 0
			break;
 63e:	08 95       	ret
		case enemy_wait: //TODO: Win Message
			if(C0){ state = enemy_C0Press; } 
 640:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <C0>
 644:	21 11       	cpse	r18, r1
 646:	ac c0       	rjmp	.+344    	; 0x7a0 <enemySMTick+0x19c>
 648:	08 95       	ret
			else{ state = enemy_wait; }
			break;
		case enemy_C0Press:
			if(C0){ state = enemy_C0Press; }
 64a:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <C0>
 64e:	21 11       	cpse	r18, r1
 650:	a9 c0       	rjmp	.+338    	; 0x7a4 <enemySMTick+0x1a0>
			else if(!C0){ inGame = 1; state = enemy_spawnWait; }
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <inGame>
 658:	52 c0       	rjmp	.+164    	; 0x6fe <enemySMTick+0xfa>
			break; 
		case enemy_spawn:
			if(spawnedEnemies < enemyCount){ 
 65a:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <spawnedEnemies>
 65e:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <enemyCount>
 662:	98 17       	cp	r25, r24
 664:	08 f4       	brcc	.+2      	; 0x668 <enemySMTick+0x64>
 666:	4b c0       	rjmp	.+150    	; 0x6fe <enemySMTick+0xfa>
				state = enemy_spawnWait; 
			} else if((spawnedEnemies >= enemyCount) && (receivedByte == 1)){
 668:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <receivedByte>
 66c:	81 30       	cpi	r24, 0x01	; 1
 66e:	91 f4       	brne	.+36     	; 0x694 <enemySMTick+0x90>
 670:	7a c0       	rjmp	.+244    	; 0x766 <enemySMTick+0x162>
			} else {
				state = enemy_spawn;
			}
			break;
		case enemy_spawnWait:
			if(timeCount >= 15){
 672:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timeCount>
 676:	8f 30       	cpi	r24, 0x0F	; 15
 678:	68 f4       	brcc	.+26     	; 0x694 <enemySMTick+0x90>
 67a:	41 c0       	rjmp	.+130    	; 0x6fe <enemySMTick+0xfa>
				state = enemy_spawnWait; 
			}
			break;
		case enemy_levelComplete: state = enemy_init; break;
	}
	switch(state){ //Actions
 67c:	84 30       	cpi	r24, 0x04	; 4
 67e:	91 05       	cpc	r25, r1
 680:	09 f4       	brne	.+2      	; 0x684 <enemySMTick+0x80>
 682:	3d c0       	rjmp	.+122    	; 0x6fe <enemySMTick+0xfa>
 684:	85 30       	cpi	r24, 0x05	; 5
 686:	91 05       	cpc	r25, r1
 688:	09 f4       	brne	.+2      	; 0x68c <enemySMTick+0x88>
 68a:	6d c0       	rjmp	.+218    	; 0x766 <enemySMTick+0x162>
 68c:	83 30       	cpi	r24, 0x03	; 3
 68e:	91 05       	cpc	r25, r1
 690:	09 f0       	breq	.+2      	; 0x694 <enemySMTick+0x90>
 692:	88 c0       	rjmp	.+272    	; 0x7a4 <enemySMTick+0x1a0>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
 694:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case enemy_init:
			break;
		case enemy_wait: break;
		case enemy_C0Press: break;
		case enemy_spawn: //Send info to USART about enemies. //TODO: Check if player's health reaches 0
			if(USART_HasReceived(0)){
 698:	88 23       	and	r24, r24
 69a:	4c f5       	brge	.+82     	; 0x6ee <enemySMTick+0xea>
				receivedByte = USART_Receive(0);
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	a0 df       	rcall	.-192    	; 0x5e0 <USART_Receive>
 6a0:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <receivedByte>
				if(receivedByte == 2){
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	51 f4       	brne	.+20     	; 0x6bc <enemySMTick+0xb8>
					health -= 20;
 6a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <health>
 6ac:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <health+0x1>
 6b0:	44 97       	sbiw	r24, 0x14	; 20
 6b2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <health+0x1>
 6b6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <health>
 6ba:	17 c0       	rjmp	.+46     	; 0x6ea <enemySMTick+0xe6>
				}
				if(receivedByte == 3){
 6bc:	83 30       	cpi	r24, 0x03	; 3
 6be:	51 f4       	brne	.+20     	; 0x6d4 <enemySMTick+0xd0>
					health -= 20;
 6c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <health>
 6c4:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <health+0x1>
 6c8:	44 97       	sbiw	r24, 0x14	; 20
 6ca:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <health+0x1>
 6ce:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <health>
 6d2:	0b c0       	rjmp	.+22     	; 0x6ea <enemySMTick+0xe6>
				}
				if(receivedByte == 4){
 6d4:	84 30       	cpi	r24, 0x04	; 4
 6d6:	49 f4       	brne	.+18     	; 0x6ea <enemySMTick+0xe6>
					health -= 20;
 6d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <health>
 6dc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <health+0x1>
 6e0:	44 97       	sbiw	r24, 0x14	; 20
 6e2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <health+0x1>
 6e6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <health>
				}
				USART_Flush(0);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	2d df       	rcall	.-422    	; 0x548 <USART_Flush>
			}
			spawnedEnemies++; 
 6ee:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <spawnedEnemies>
 6f2:	8f 5f       	subi	r24, 0xFF	; 255
 6f4:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <spawnedEnemies>
			break;
 6f8:	83 e0       	ldi	r24, 0x03	; 3
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	08 95       	ret
		case enemy_spawnWait:
			if(timeCount >= 15){
 6fe:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timeCount>
 702:	8f 30       	cpi	r24, 0x0F	; 15
 704:	50 f1       	brcs	.+84     	; 0x75a <enemySMTick+0x156>
				if(spawnedEnemies == 0){ 
 706:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <spawnedEnemies>
 70a:	81 11       	cpse	r24, r1
 70c:	04 c0       	rjmp	.+8      	; 0x716 <enemySMTick+0x112>
					outgoingByte |= 0x81; // 1000 0001
					outgoingByte &= 0x81; 
 70e:	81 e8       	ldi	r24, 0x81	; 129
 710:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 714:	1d c0       	rjmp	.+58     	; 0x750 <enemySMTick+0x14c>
				} else if(spawnedEnemies == 1){
 716:	81 30       	cpi	r24, 0x01	; 1
 718:	21 f4       	brne	.+8      	; 0x722 <enemySMTick+0x11e>
					outgoingByte |= 0x82;
					outgoingByte &= 0x82;
 71a:	82 e8       	ldi	r24, 0x82	; 130
 71c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 720:	17 c0       	rjmp	.+46     	; 0x750 <enemySMTick+0x14c>
				} else if(spawnedEnemies == 2){
 722:	82 30       	cpi	r24, 0x02	; 2
 724:	21 f4       	brne	.+8      	; 0x72e <enemySMTick+0x12a>
					outgoingByte |= 0x83;
					outgoingByte &= 0x83;
 726:	83 e8       	ldi	r24, 0x83	; 131
 728:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 72c:	11 c0       	rjmp	.+34     	; 0x750 <enemySMTick+0x14c>
				} else if(spawnedEnemies == 3){
 72e:	83 30       	cpi	r24, 0x03	; 3
 730:	21 f4       	brne	.+8      	; 0x73a <enemySMTick+0x136>
					outgoingByte |= 0x84;
					outgoingByte &= 0x84;
 732:	84 e8       	ldi	r24, 0x84	; 132
 734:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 738:	0b c0       	rjmp	.+22     	; 0x750 <enemySMTick+0x14c>
				} else if(spawnedEnemies == 4){
 73a:	84 30       	cpi	r24, 0x04	; 4
 73c:	21 f4       	brne	.+8      	; 0x746 <enemySMTick+0x142>
					outgoingByte |= 0x85;
					outgoingByte &= 0x85;
 73e:	85 e8       	ldi	r24, 0x85	; 133
 740:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 744:	05 c0       	rjmp	.+10     	; 0x750 <enemySMTick+0x14c>
				} else if(spawnedEnemies == 5){
 746:	85 30       	cpi	r24, 0x05	; 5
 748:	19 f4       	brne	.+6      	; 0x750 <enemySMTick+0x14c>
					outgoingByte |= 0x80;
					outgoingByte &= 0x80;
 74a:	80 e8       	ldi	r24, 0x80	; 128
 74c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
				}
				timeCount = 0;
 750:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <timeCount>
 754:	84 e0       	ldi	r24, 0x04	; 4
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	08 95       	ret
			} else if(timeCount < 15){
				timeCount++;
 75a:	8f 5f       	subi	r24, 0xFF	; 255
 75c:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <timeCount>
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	08 95       	ret
			}
			break;
		case enemy_levelComplete:
			outgoingByte &= 0x7F; // "inGame bit" to 0
 766:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <outgoingByte>
 76a:	8f 77       	andi	r24, 0x7F	; 127
 76c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
			if(health <= 0){
 770:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <health>
 774:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <health+0x1>
 778:	18 16       	cp	r1, r24
 77a:	19 06       	cpc	r1, r25
 77c:	2c f0       	brlt	.+10     	; 0x788 <enemySMTick+0x184>
				LCD_DisplayString(1, "You lose");
 77e:	61 e9       	ldi	r22, 0x91	; 145
 780:	71 e0       	ldi	r23, 0x01	; 1
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	46 de       	rcall	.-884    	; 0x412 <LCD_DisplayString>
 786:	04 c0       	rjmp	.+8      	; 0x790 <enemySMTick+0x18c>
			} else if(health >= 0){
				LCD_DisplayString(1, "You win");
 788:	6a e9       	ldi	r22, 0x9A	; 154
 78a:	71 e0       	ldi	r23, 0x01	; 1
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	41 de       	rcall	.-894    	; 0x412 <LCD_DisplayString>
				level++;
				updatePlayerInfo(gold, level, health);
			}
			LCD_DisplayString(1, updatePlayerInfo(gold, level, health));
			*/
			inGame = 0;
 790:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <inGame>
			break;
 794:	85 e0       	ldi	r24, 0x05	; 5
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	08 95       	ret
			} 
			else if(timeCount < 15){
				state = enemy_spawnWait; 
			}
			break;
		case enemy_levelComplete: state = enemy_init; break;
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	08 95       	ret
			enemyCount = 5; //"timeCount" won't be set if initialized in "actions"
			timeCount = 0;
			state = enemy_wait; 
			break;
		case enemy_wait: //TODO: Win Message
			if(C0){ state = enemy_C0Press; } 
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	90 e0       	ldi	r25, 0x00	; 0
			*/
			inGame = 0;
			break;
	}
	return state;
}
 7a4:	08 95       	ret

000007a6 <updatePlayerInfo>:

//------------------------------------Functions

//Takes gold, level, and health variables and returns
//string to display with inputs
char* updatePlayerInfo(int newGold, int newLevel, int newHealth){
 7a6:	cf 92       	push	r12
 7a8:	df 92       	push	r13
 7aa:	ef 92       	push	r14
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	cd b7       	in	r28, 0x3d	; 61
 7b8:	de b7       	in	r29, 0x3e	; 62
 7ba:	c5 56       	subi	r28, 0x65	; 101
 7bc:	d1 09       	sbc	r29, r1
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	f8 94       	cli
 7c2:	de bf       	out	0x3e, r29	; 62
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	cd bf       	out	0x3d, r28	; 61
 7c8:	8c 01       	movw	r16, r24
 7ca:	6b 01       	movw	r12, r22
 7cc:	7a 01       	movw	r14, r20
	char updatedInfo[33] = "Gold:";
 7ce:	96 e0       	ldi	r25, 0x06	; 6
 7d0:	e8 e2       	ldi	r30, 0x28	; 40
 7d2:	f1 e0       	ldi	r31, 0x01	; 1
 7d4:	de 01       	movw	r26, r28
 7d6:	11 96       	adiw	r26, 0x01	; 1
 7d8:	01 90       	ld	r0, Z+
 7da:	0d 92       	st	X+, r0
 7dc:	9a 95       	dec	r25
 7de:	e1 f7       	brne	.-8      	; 0x7d8 <updatePlayerInfo+0x32>
 7e0:	fe 01       	movw	r30, r28
 7e2:	37 96       	adiw	r30, 0x07	; 7
 7e4:	8b e1       	ldi	r24, 0x1B	; 27
 7e6:	df 01       	movw	r26, r30
 7e8:	1d 92       	st	X+, r1
 7ea:	8a 95       	dec	r24
 7ec:	e9 f7       	brne	.-6      	; 0x7e8 <updatePlayerInfo+0x42>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7ee:	4a e0       	ldi	r20, 0x0A	; 10
 7f0:	be 01       	movw	r22, r28
 7f2:	6a 5c       	subi	r22, 0xCA	; 202
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	c8 01       	movw	r24, r16
 7f8:	85 d3       	rcall	.+1802   	; 0xf04 <__itoa_ncheck>
	char buffer[20];
	
	//Gold
	//updatedInfo = temp; //Can't assign to char*
	itoa(newGold, buffer, 10); //convert int(newGold) to string(buffer)
	strcat(updatedInfo, buffer); //concatenate string(buffer) onto updatedInfo
 7fa:	be 01       	movw	r22, r28
 7fc:	6a 5c       	subi	r22, 0xCA	; 202
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	ce 01       	movw	r24, r28
 802:	01 96       	adiw	r24, 0x01	; 1
 804:	6d d3       	rcall	.+1754   	; 0xee0 <strcat>
								 //Can concatenate onto char*?..

	//Stage
	if(newGold < 10){ //gold will be 1 digit
 806:	0a 30       	cpi	r16, 0x0A	; 10
 808:	11 05       	cpc	r17, r1
 80a:	dc f4       	brge	.+54     	; 0x842 <updatePlayerInfo+0x9c>
		char temp2[20] = "   Stage:"; 
 80c:	8a e0       	ldi	r24, 0x0A	; 10
 80e:	e9 e4       	ldi	r30, 0x49	; 73
 810:	f1 e0       	ldi	r31, 0x01	; 1
 812:	de 01       	movw	r26, r28
 814:	ae 5a       	subi	r26, 0xAE	; 174
 816:	bf 4f       	sbci	r27, 0xFF	; 255
 818:	01 90       	ld	r0, Z+
 81a:	0d 92       	st	X+, r0
 81c:	8a 95       	dec	r24
 81e:	e1 f7       	brne	.-8      	; 0x818 <updatePlayerInfo+0x72>
 820:	e2 e5       	ldi	r30, 0x52	; 82
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	ec 0f       	add	r30, r28
 826:	fd 1f       	adc	r31, r29
 828:	3a 96       	adiw	r30, 0x0a	; 10
 82a:	8a e0       	ldi	r24, 0x0A	; 10
 82c:	df 01       	movw	r26, r30
 82e:	1d 92       	st	X+, r1
 830:	8a 95       	dec	r24
 832:	e9 f7       	brne	.-6      	; 0x82e <updatePlayerInfo+0x88>
		strcpy(temp, temp2);
 834:	be 01       	movw	r22, r28
 836:	6e 5a       	subi	r22, 0xAE	; 174
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	ce 01       	movw	r24, r28
 83c:	82 96       	adiw	r24, 0x22	; 34
 83e:	5b d3       	rcall	.+1718   	; 0xef6 <strcpy>
 840:	3d c0       	rjmp	.+122    	; 0x8bc <updatePlayerInfo+0x116>
	} else if(newGold >= 10 && newGold < 100){ //gold will be 2 digits
 842:	c8 01       	movw	r24, r16
 844:	0a 97       	sbiw	r24, 0x0a	; 10
 846:	8a 35       	cpi	r24, 0x5A	; 90
 848:	91 05       	cpc	r25, r1
 84a:	d8 f4       	brcc	.+54     	; 0x882 <updatePlayerInfo+0xdc>
		char temp2[20] = "  Stage:";
 84c:	89 e0       	ldi	r24, 0x09	; 9
 84e:	ed e5       	ldi	r30, 0x5D	; 93
 850:	f1 e0       	ldi	r31, 0x01	; 1
 852:	de 01       	movw	r26, r28
 854:	ae 5a       	subi	r26, 0xAE	; 174
 856:	bf 4f       	sbci	r27, 0xFF	; 255
 858:	01 90       	ld	r0, Z+
 85a:	0d 92       	st	X+, r0
 85c:	8a 95       	dec	r24
 85e:	e1 f7       	brne	.-8      	; 0x858 <updatePlayerInfo+0xb2>
 860:	e2 e5       	ldi	r30, 0x52	; 82
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	ec 0f       	add	r30, r28
 866:	fd 1f       	adc	r31, r29
 868:	39 96       	adiw	r30, 0x09	; 9
 86a:	8b e0       	ldi	r24, 0x0B	; 11
 86c:	df 01       	movw	r26, r30
 86e:	1d 92       	st	X+, r1
 870:	8a 95       	dec	r24
 872:	e9 f7       	brne	.-6      	; 0x86e <updatePlayerInfo+0xc8>
		strcpy(temp, temp2);
 874:	be 01       	movw	r22, r28
 876:	6e 5a       	subi	r22, 0xAE	; 174
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	ce 01       	movw	r24, r28
 87c:	82 96       	adiw	r24, 0x22	; 34
 87e:	3b d3       	rcall	.+1654   	; 0xef6 <strcpy>
 880:	1d c0       	rjmp	.+58     	; 0x8bc <updatePlayerInfo+0x116>
	} else if(newGold >= 100){ //gold will be 3 digits
 882:	04 36       	cpi	r16, 0x64	; 100
 884:	11 05       	cpc	r17, r1
 886:	d4 f0       	brlt	.+52     	; 0x8bc <updatePlayerInfo+0x116>
		char temp2[20] = " Stage:";
 888:	88 e0       	ldi	r24, 0x08	; 8
 88a:	e1 e7       	ldi	r30, 0x71	; 113
 88c:	f1 e0       	ldi	r31, 0x01	; 1
 88e:	de 01       	movw	r26, r28
 890:	ae 5a       	subi	r26, 0xAE	; 174
 892:	bf 4f       	sbci	r27, 0xFF	; 255
 894:	01 90       	ld	r0, Z+
 896:	0d 92       	st	X+, r0
 898:	8a 95       	dec	r24
 89a:	e1 f7       	brne	.-8      	; 0x894 <updatePlayerInfo+0xee>
 89c:	e2 e5       	ldi	r30, 0x52	; 82
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	ec 0f       	add	r30, r28
 8a2:	fd 1f       	adc	r31, r29
 8a4:	38 96       	adiw	r30, 0x08	; 8
 8a6:	8c e0       	ldi	r24, 0x0C	; 12
 8a8:	df 01       	movw	r26, r30
 8aa:	1d 92       	st	X+, r1
 8ac:	8a 95       	dec	r24
 8ae:	e9 f7       	brne	.-6      	; 0x8aa <updatePlayerInfo+0x104>
		strcpy(temp, temp2);
 8b0:	be 01       	movw	r22, r28
 8b2:	6e 5a       	subi	r22, 0xAE	; 174
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	ce 01       	movw	r24, r28
 8b8:	82 96       	adiw	r24, 0x22	; 34
 8ba:	1d d3       	rcall	.+1594   	; 0xef6 <strcpy>
	}
	strcat(updatedInfo, temp);
 8bc:	be 01       	movw	r22, r28
 8be:	6e 5d       	subi	r22, 0xDE	; 222
 8c0:	7f 4f       	sbci	r23, 0xFF	; 255
 8c2:	ce 01       	movw	r24, r28
 8c4:	01 96       	adiw	r24, 0x01	; 1
 8c6:	0c d3       	rcall	.+1560   	; 0xee0 <strcat>
 8c8:	4a e0       	ldi	r20, 0x0A	; 10
 8ca:	be 01       	movw	r22, r28
 8cc:	6a 5c       	subi	r22, 0xCA	; 202
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	c6 01       	movw	r24, r12
 8d2:	18 d3       	rcall	.+1584   	; 0xf04 <__itoa_ncheck>
	itoa(newLevel, buffer, 10);
	strcat(updatedInfo, buffer);
 8d4:	be 01       	movw	r22, r28
 8d6:	6a 5c       	subi	r22, 0xCA	; 202
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	ce 01       	movw	r24, r28
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	00 d3       	rcall	.+1536   	; 0xee0 <strcat>

	//Health
	char temp3[] = "Health:";
 8e0:	98 e0       	ldi	r25, 0x08	; 8
 8e2:	e2 ea       	ldi	r30, 0xA2	; 162
 8e4:	f1 e0       	ldi	r31, 0x01	; 1
 8e6:	de 01       	movw	r26, r28
 8e8:	a6 5b       	subi	r26, 0xB6	; 182
 8ea:	bf 4f       	sbci	r27, 0xFF	; 255
 8ec:	01 90       	ld	r0, Z+
 8ee:	0d 92       	st	X+, r0
 8f0:	9a 95       	dec	r25
 8f2:	e1 f7       	brne	.-8      	; 0x8ec <updatePlayerInfo+0x146>
	strcat(updatedInfo, temp3);
 8f4:	be 01       	movw	r22, r28
 8f6:	66 5b       	subi	r22, 0xB6	; 182
 8f8:	7f 4f       	sbci	r23, 0xFF	; 255
 8fa:	ce 01       	movw	r24, r28
 8fc:	01 96       	adiw	r24, 0x01	; 1
 8fe:	f0 d2       	rcall	.+1504   	; 0xee0 <strcat>
 900:	4a e0       	ldi	r20, 0x0A	; 10
 902:	be 01       	movw	r22, r28
 904:	6a 5c       	subi	r22, 0xCA	; 202
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	c7 01       	movw	r24, r14
 90a:	fc d2       	rcall	.+1528   	; 0xf04 <__itoa_ncheck>
	itoa(newHealth, buffer, 10);
	strcat(updatedInfo, buffer);
 90c:	be 01       	movw	r22, r28
 90e:	6a 5c       	subi	r22, 0xCA	; 202
 910:	7f 4f       	sbci	r23, 0xFF	; 255
 912:	ce 01       	movw	r24, r28
 914:	01 96       	adiw	r24, 0x01	; 1
 916:	e4 d2       	rcall	.+1480   	; 0xee0 <strcat>

	return updatedInfo;
}
 918:	ce 01       	movw	r24, r28
 91a:	01 96       	adiw	r24, 0x01	; 1
 91c:	cb 59       	subi	r28, 0x9B	; 155
 91e:	df 4f       	sbci	r29, 0xFF	; 255
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	ff 90       	pop	r15
 934:	ef 90       	pop	r14
 936:	df 90       	pop	r13
 938:	cf 90       	pop	r12
 93a:	08 95       	ret

0000093c <LCDTick>:
}

enum LCD_States{LCD_initialize, LCD_info, LCD_win, LCD_loss};

int LCDTick(int state){
	switch(state){
 93c:	00 97       	sbiw	r24, 0x00	; 0
 93e:	b1 f0       	breq	.+44     	; 0x96c <LCDTick+0x30>
 940:	81 30       	cpi	r24, 0x01	; 1
 942:	91 05       	cpc	r25, r1
 944:	79 f4       	brne	.+30     	; 0x964 <LCDTick+0x28>
		case LCD_initialize: state = LCD_info; break;
		case LCD_info:
			if(level == 3){ state = LCD_win; } 
 946:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <level>
 94a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <level+0x1>
 94e:	03 97       	sbiw	r24, 0x03	; 3
 950:	09 f4       	brne	.+2      	; 0x954 <LCDTick+0x18>
 952:	7a c0       	rjmp	.+244    	; 0xa48 <LCDTick+0x10c>
			else if(health == 0){ state = LCD_loss; } 
 954:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <health>
 958:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <health+0x1>
 95c:	89 2b       	or	r24, r25
 95e:	09 f4       	brne	.+2      	; 0x962 <LCDTick+0x26>
 960:	76 c0       	rjmp	.+236    	; 0xa4e <LCDTick+0x112>
 962:	04 c0       	rjmp	.+8      	; 0x96c <LCDTick+0x30>
			else { state = LCD_info; }
			break;
		case LCD_win: break;
		case LCD_loss: break;
	}
	switch(state){
 964:	81 30       	cpi	r24, 0x01	; 1
 966:	91 05       	cpc	r25, r1
 968:	09 f0       	breq	.+2      	; 0x96c <LCDTick+0x30>
 96a:	73 c0       	rjmp	.+230    	; 0xa52 <LCDTick+0x116>
 96c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case LCD_initialize: break;
		case LCD_info:
			if(USART_HasReceived(0)){ //update info
 970:	88 23       	and	r24, r24
 972:	0c f0       	brlt	.+2      	; 0x976 <LCDTick+0x3a>
 974:	66 c0       	rjmp	.+204    	; 0xa42 <LCDTick+0x106>
				receivedByte = USART_Receive(0); //check USART0
 976:	80 e0       	ldi	r24, 0x00	; 0
 978:	33 de       	rcall	.-922    	; 0x5e0 <USART_Receive>
 97a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <receivedByte>
				USART_Flush(0);
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	e3 dd       	rcall	.-1082   	; 0x548 <USART_Flush>
				if(receivedByte << 2 == 20){ 
 982:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <receivedByte>
 986:	94 e0       	ldi	r25, 0x04	; 4
 988:	89 9f       	mul	r24, r25
 98a:	90 01       	movw	r18, r0
 98c:	11 24       	eor	r1, r1
 98e:	85 30       	cpi	r24, 0x05	; 5
 990:	a9 f4       	brne	.+42     	; 0x9bc <LCDTick+0x80>
					gold -= 20;
 992:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <gold>
 996:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <gold+0x1>
 99a:	44 97       	sbiw	r24, 0x14	; 20
 99c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <gold+0x1>
 9a0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <gold>
					updatePlayerInfo(gold, level, health);
 9a4:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <health>
 9a8:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <health+0x1>
 9ac:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <level>
 9b0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <level+0x1>
 9b4:	f8 de       	rcall	.-528    	; 0x7a6 <updatePlayerInfo>
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	08 95       	ret
				} else if(receivedByte << 2 == 40){ 
 9bc:	28 32       	cpi	r18, 0x28	; 40
 9be:	31 05       	cpc	r19, r1
 9c0:	a9 f4       	brne	.+42     	; 0x9ec <LCDTick+0xb0>
					gold -= 40;
 9c2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <gold>
 9c6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <gold+0x1>
 9ca:	88 97       	sbiw	r24, 0x28	; 40
 9cc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <gold+0x1>
 9d0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <gold>
					updatePlayerInfo(gold, level, health);
 9d4:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <health>
 9d8:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <health+0x1>
 9dc:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <level>
 9e0:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <level+0x1>
 9e4:	e0 de       	rcall	.-576    	; 0x7a6 <updatePlayerInfo>
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	08 95       	ret
				} else if(receivedByte << 2 == 60){ 
 9ec:	2c 33       	cpi	r18, 0x3C	; 60
 9ee:	31 05       	cpc	r19, r1
 9f0:	a9 f4       	brne	.+42     	; 0xa1c <LCDTick+0xe0>
					gold -= 60;
 9f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <gold>
 9f6:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <gold+0x1>
 9fa:	cc 97       	sbiw	r24, 0x3c	; 60
 9fc:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <gold+0x1>
 a00:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <gold>
					updatePlayerInfo(gold, level, health);
 a04:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <health>
 a08:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <health+0x1>
 a0c:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <level>
 a10:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <level+0x1>
 a14:	c8 de       	rcall	.-624    	; 0x7a6 <updatePlayerInfo>
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	08 95       	ret
				} else {
					LCD_DisplayString(1, updatePlayerInfo(gold, level, health));
 a1c:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <health>
 a20:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <health+0x1>
 a24:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <level>
 a28:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <level+0x1>
 a2c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <gold>
 a30:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <gold+0x1>
 a34:	b8 de       	rcall	.-656    	; 0x7a6 <updatePlayerInfo>
 a36:	bc 01       	movw	r22, r24
 a38:	81 e0       	ldi	r24, 0x01	; 1
 a3a:	eb dc       	rcall	.-1578   	; 0x412 <LCD_DisplayString>
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	08 95       	ret
 a42:	81 e0       	ldi	r24, 0x01	; 1
 a44:	90 e0       	ldi	r25, 0x00	; 0
 a46:	08 95       	ret

int LCDTick(int state){
	switch(state){
		case LCD_initialize: state = LCD_info; break;
		case LCD_info:
			if(level == 3){ state = LCD_win; } 
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	08 95       	ret
			else if(health == 0){ state = LCD_loss; } 
 a4e:	83 e0       	ldi	r24, 0x03	; 3
 a50:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case LCD_win: break;
		case LCD_loss: break;
	}
	return state;
}
 a52:	08 95       	ret

00000a54 <InitADC>:
	return updatedInfo;
}

void InitADC(void)
{
	ADMUX|=(1<<REFS0);
 a54:	ec e7       	ldi	r30, 0x7C	; 124
 a56:	f0 e0       	ldi	r31, 0x00	; 0
 a58:	80 81       	ld	r24, Z
 a5a:	80 64       	ori	r24, 0x40	; 64
 a5c:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
 a5e:	ea e7       	ldi	r30, 0x7A	; 122
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	87 68       	ori	r24, 0x87	; 135
 a66:	80 83       	st	Z, r24
 a68:	08 95       	ret

00000a6a <readadc>:
}

int readadc(int ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 a6a:	ec e7       	ldi	r30, 0x7C	; 124
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	20 81       	ld	r18, Z
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}

int readadc(int ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
 a70:	87 70       	andi	r24, 0x07	; 7
 a72:	99 27       	eor	r25, r25
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 a74:	28 7f       	andi	r18, 0xF8	; 248
 a76:	82 2b       	or	r24, r18
 a78:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
 a7a:	ea e7       	ldi	r30, 0x7A	; 122
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	80 81       	ld	r24, Z
 a80:	80 64       	ori	r24, 0x40	; 64
 a82:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
 a84:	80 81       	ld	r24, Z
 a86:	86 fd       	sbrc	r24, 6
 a88:	fd cf       	rjmp	.-6      	; 0xa84 <readadc+0x1a>
	return(ADC);        //RETURN ADC VALUE
 a8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 a8e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 a92:	08 95       	ret

00000a94 <ADCTick>:
}

enum ADC_States{ADC_initialize, ADC_display};

int ADCTick(int state){
	switch(state){
 a94:	82 30       	cpi	r24, 0x02	; 2
 a96:	91 05       	cpc	r25, r1
 a98:	20 f0       	brcs	.+8      	; 0xaa2 <ADCTick+0xe>
		case ADC_initialize: state = ADC_display; break;
		case ADC_display: state = ADC_display; break;
	}
	switch(state){
 a9a:	81 30       	cpi	r24, 0x01	; 1
 a9c:	91 05       	cpc	r25, r1
 a9e:	09 f0       	breq	.+2      	; 0xaa2 <ADCTick+0xe>
 aa0:	48 c0       	rjmp	.+144    	; 0xb32 <ADCTick+0x9e>
		case ADC_initialize: break;
		case ADC_display:
			//LCD_Cursor(1);
			x2 = readadc(0);
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	e1 df       	rcall	.-62     	; 0xa6a <readadc>
 aa8:	90 93 59 02 	sts	0x0259, r25	; 0x800259 <x2+0x1>
 aac:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <x2>
			y2 = readadc(1);
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	da df       	rcall	.-76     	; 0xa6a <readadc>
			x2 = x2 - 512;
 ab6:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <x2>
 aba:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <x2+0x1>
 abe:	32 50       	subi	r19, 0x02	; 2
 ac0:	30 93 59 02 	sts	0x0259, r19	; 0x800259 <x2+0x1>
 ac4:	20 93 58 02 	sts	0x0258, r18	; 0x800258 <x2>
			y2 = y2 - 512;
 ac8:	92 50       	subi	r25, 0x02	; 2
 aca:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <y2+0x1>
 ace:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <y2>
			//LCD_DisplayString(1, itoa(x2, a, 10)); //Must disabled ClearScreen() in LCD_DisplayString() in io.c to see coordinates.
			//LCD_DisplayString(17, itoa(y2, b, 10));
			if(!inGame){ //NOTE: Cannot move cursor while in game
 ad2:	40 91 75 02 	lds	r20, 0x0275	; 0x800275 <inGame>
 ad6:	41 11       	cpse	r20, r1
 ad8:	2a c0       	rjmp	.+84     	; 0xb2e <ADCTick+0x9a>
				if(y2 > 150){ 
 ada:	87 39       	cpi	r24, 0x97	; 151
 adc:	91 05       	cpc	r25, r1
 ade:	34 f0       	brlt	.+12     	; 0xaec <ADCTick+0x58>
					outgoingByte |= 0x08;
					outgoingByte &= 0x08; 
 ae0:	88 e0       	ldi	r24, 0x08	; 8
 ae2:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 ae6:	81 e0       	ldi	r24, 0x01	; 1
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	08 95       	ret
				} //Right. 0000 1000
				else if(y2 < -150){ 
 aec:	8a 36       	cpi	r24, 0x6A	; 106
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	34 f4       	brge	.+12     	; 0xafe <ADCTick+0x6a>
					outgoingByte |= 0x04;
					outgoingByte &= 0x04; 
 af2:	84 e0       	ldi	r24, 0x04	; 4
 af4:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	08 95       	ret
				} //Left. 0000 0100
				else if(x2 < -150){ 
 afe:	2a 36       	cpi	r18, 0x6A	; 106
 b00:	8f ef       	ldi	r24, 0xFF	; 255
 b02:	38 07       	cpc	r19, r24
 b04:	34 f4       	brge	.+12     	; 0xb12 <ADCTick+0x7e>
					outgoingByte |= 0x01; 
					outgoingByte &= 0x01;
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 b0c:	81 e0       	ldi	r24, 0x01	; 1
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	08 95       	ret
				} //Up. 0000 0001
				else if(x2 > 150){ 
 b12:	27 39       	cpi	r18, 0x97	; 151
 b14:	31 05       	cpc	r19, r1
 b16:	34 f0       	brlt	.+12     	; 0xb24 <ADCTick+0x90>
					outgoingByte |= 0x02; 
					outgoingByte &= 0x02;
 b18:	82 e0       	ldi	r24, 0x02	; 2
 b1a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <outgoingByte>
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	08 95       	ret
				} //Down. 0000 0010
				else{ 
					outgoingByte |= 0x00; 
					outgoingByte &= 0x00;
 b24:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <outgoingByte>
 b28:	81 e0       	ldi	r24, 0x01	; 1
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	08 95       	ret
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	90 e0       	ldi	r25, 0x00	; 0
				} //No Input. 0000 0000
			}
			break;
	}
	return state;
}
 b32:	08 95       	ret

00000b34 <main>:
	return state;
}
//------------------------------------End FSMs

int main(void)
{
 b34:	cf 93       	push	r28
 b36:	df 93       	push	r29
 b38:	cd b7       	in	r28, 0x3d	; 61
 b3a:	de b7       	in	r29, 0x3e	; 62
 b3c:	2c 97       	sbiw	r28, 0x0c	; 12
 b3e:	0f b6       	in	r0, 0x3f	; 63
 b40:	f8 94       	cli
 b42:	de bf       	out	0x3e, r29	; 62
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF; //Inputs. Using A0 and A1 as inputs for 2-axis joystick
 b48:	11 b8       	out	0x01, r1	; 1
 b4a:	8f ef       	ldi	r24, 0xFF	; 255
 b4c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //LCD Display, output to PORTB
 b4e:	84 b9       	out	0x04, r24	; 4
 b50:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF; //Inputs. Using C0-C5 as user input
 b52:	17 b8       	out	0x07, r1	; 7
 b54:	88 b9       	out	0x08, r24	; 8
	DDRD = 0x30; PORTD = 0xCF; //D4 and D5 are outputs(control bus). D0 - D3 are RXD0, TXD0, RXD1, and TXD1 (UART Functionality)
 b56:	80 e3       	ldi	r24, 0x30	; 48
 b58:	8a b9       	out	0x0a, r24	; 10
 b5a:	8f ec       	ldi	r24, 0xCF	; 207
 b5c:	8b b9       	out	0x0b, r24	; 11
 b5e:	18 ec       	ldi	r17, 0xC8	; 200
 b60:	00 e0       	ldi	r16, 0x00	; 0
 b62:	f1 2c       	mov	r15, r1
 b64:	e1 2c       	mov	r14, r1
 b66:	54 ef       	ldi	r21, 0xF4	; 244
 b68:	41 e0       	ldi	r20, 0x01	; 1
 b6a:	30 e0       	ldi	r19, 0x00	; 0
 b6c:	20 e0       	ldi	r18, 0x00	; 0
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <main+0x44>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 b70:	16 2f       	mov	r17, r22
 b72:	07 2f       	mov	r16, r23
 b74:	f8 2e       	mov	r15, r24
 b76:	e9 2e       	mov	r14, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 b78:	65 2f       	mov	r22, r21
 b7a:	74 2f       	mov	r23, r20
 b7c:	83 2f       	mov	r24, r19
 b7e:	92 2f       	mov	r25, r18
 b80:	21 2f       	mov	r18, r17
 b82:	30 2f       	mov	r19, r16
 b84:	4f 2d       	mov	r20, r15
 b86:	5e 2d       	mov	r21, r14
 b88:	80 d1       	rcall	.+768    	; 0xe8a <__udivmodsi4>
 b8a:	51 2f       	mov	r21, r17
 b8c:	40 2f       	mov	r20, r16
 b8e:	3f 2d       	mov	r19, r15
 b90:	2e 2d       	mov	r18, r14
		if( c == 0 ) { return b; }
 b92:	61 15       	cp	r22, r1
 b94:	71 05       	cpc	r23, r1
 b96:	81 05       	cpc	r24, r1
 b98:	91 05       	cpc	r25, r1
 b9a:	51 f7       	brne	.-44     	; 0xb70 <main+0x3c>
 b9c:	0f 2e       	mov	r0, r31
 b9e:	f8 ec       	ldi	r31, 0xC8	; 200
 ba0:	df 2e       	mov	r13, r31
 ba2:	f0 2d       	mov	r31, r0
 ba4:	c1 2c       	mov	r12, r1
 ba6:	b1 2c       	mov	r11, r1
 ba8:	a1 2c       	mov	r10, r1
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <main+0x80>
		a = b;
		b = c;
 bac:	d6 2e       	mov	r13, r22
 bae:	c7 2e       	mov	r12, r23
 bb0:	b8 2e       	mov	r11, r24
 bb2:	a9 2e       	mov	r10, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 bb4:	61 2f       	mov	r22, r17
 bb6:	70 2f       	mov	r23, r16
 bb8:	8f 2d       	mov	r24, r15
 bba:	9e 2d       	mov	r25, r14
 bbc:	2d 2d       	mov	r18, r13
 bbe:	3c 2d       	mov	r19, r12
 bc0:	4b 2d       	mov	r20, r11
 bc2:	5a 2d       	mov	r21, r10
 bc4:	62 d1       	rcall	.+708    	; 0xe8a <__udivmodsi4>
 bc6:	1d 2d       	mov	r17, r13
 bc8:	0c 2d       	mov	r16, r12
 bca:	fb 2c       	mov	r15, r11
 bcc:	ea 2c       	mov	r14, r10
		if( c == 0 ) { return b; }
 bce:	61 15       	cp	r22, r1
 bd0:	71 05       	cpc	r23, r1
 bd2:	81 05       	cpc	r24, r1
 bd4:	91 05       	cpc	r25, r1
 bd6:	51 f7       	brne	.-44     	; 0xbac <main+0x78>
 bd8:	14 e6       	ldi	r17, 0x64	; 100
 bda:	00 e0       	ldi	r16, 0x00	; 0
 bdc:	f1 2c       	mov	r15, r1
 bde:	e1 2c       	mov	r14, r1
 be0:	04 c0       	rjmp	.+8      	; 0xbea <main+0xb6>
		a = b;
		b = c;
 be2:	16 2f       	mov	r17, r22
 be4:	07 2f       	mov	r16, r23
 be6:	f8 2e       	mov	r15, r24
 be8:	e9 2e       	mov	r14, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 bea:	6d 2d       	mov	r22, r13
 bec:	7c 2d       	mov	r23, r12
 bee:	8b 2d       	mov	r24, r11
 bf0:	9a 2d       	mov	r25, r10
 bf2:	21 2f       	mov	r18, r17
 bf4:	30 2f       	mov	r19, r16
 bf6:	4f 2d       	mov	r20, r15
 bf8:	5e 2d       	mov	r21, r14
 bfa:	47 d1       	rcall	.+654    	; 0xe8a <__udivmodsi4>
 bfc:	d1 2e       	mov	r13, r17
 bfe:	c0 2e       	mov	r12, r16
 c00:	bf 2c       	mov	r11, r15
 c02:	ae 2c       	mov	r10, r14
		if( c == 0 ) { return b; }
 c04:	61 15       	cp	r22, r1
 c06:	71 05       	cpc	r23, r1
 c08:	81 05       	cpc	r24, r1
 c0a:	91 05       	cpc	r25, r1
 c0c:	51 f7       	brne	.-44     	; 0xbe2 <main+0xae>
 c0e:	0f 2e       	mov	r0, r31
 c10:	f4 e6       	ldi	r31, 0x64	; 100
 c12:	df 2e       	mov	r13, r31
 c14:	f0 2d       	mov	r31, r0
 c16:	c1 2c       	mov	r12, r1
 c18:	b1 2c       	mov	r11, r1
 c1a:	a1 2c       	mov	r10, r1
 c1c:	04 c0       	rjmp	.+8      	; 0xc26 <main+0xf2>
		a = b;
		b = c;
 c1e:	d6 2e       	mov	r13, r22
 c20:	c7 2e       	mov	r12, r23
 c22:	b8 2e       	mov	r11, r24
 c24:	a9 2e       	mov	r10, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 c26:	61 2f       	mov	r22, r17
 c28:	70 2f       	mov	r23, r16
 c2a:	8f 2d       	mov	r24, r15
 c2c:	9e 2d       	mov	r25, r14
 c2e:	2d 2d       	mov	r18, r13
 c30:	3c 2d       	mov	r19, r12
 c32:	4b 2d       	mov	r20, r11
 c34:	5a 2d       	mov	r21, r10
 c36:	29 d1       	rcall	.+594    	; 0xe8a <__udivmodsi4>
 c38:	1d 2d       	mov	r17, r13
 c3a:	0c 2d       	mov	r16, r12
 c3c:	fb 2c       	mov	r15, r11
 c3e:	ea 2c       	mov	r14, r10
		if( c == 0 ) { return b; }
 c40:	61 15       	cp	r22, r1
 c42:	71 05       	cpc	r23, r1
 c44:	81 05       	cpc	r24, r1
 c46:	91 05       	cpc	r25, r1
 c48:	51 f7       	brne	.-44     	; 0xc1e <main+0xea>
 c4a:	0f 2e       	mov	r0, r31
 c4c:	f4 e6       	ldi	r31, 0x64	; 100
 c4e:	ef 2e       	mov	r14, r31
 c50:	f0 2d       	mov	r31, r0
 c52:	f1 2c       	mov	r15, r1
 c54:	00 e0       	ldi	r16, 0x00	; 0
 c56:	10 e0       	ldi	r17, 0x00	; 0
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <main+0x12e>
		a = b;
		b = c;
 c5a:	e6 2e       	mov	r14, r22
 c5c:	f7 2e       	mov	r15, r23
 c5e:	08 2f       	mov	r16, r24
 c60:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 c62:	6d 2d       	mov	r22, r13
 c64:	7c 2d       	mov	r23, r12
 c66:	8b 2d       	mov	r24, r11
 c68:	9a 2d       	mov	r25, r10
 c6a:	2e 2d       	mov	r18, r14
 c6c:	3f 2d       	mov	r19, r15
 c6e:	40 2f       	mov	r20, r16
 c70:	51 2f       	mov	r21, r17
 c72:	0b d1       	rcall	.+534    	; 0xe8a <__udivmodsi4>
 c74:	de 2c       	mov	r13, r14
 c76:	cf 2c       	mov	r12, r15
 c78:	b0 2e       	mov	r11, r16
 c7a:	a1 2e       	mov	r10, r17
		if( c == 0 ) { return b; }
 c7c:	61 15       	cp	r22, r1
 c7e:	71 05       	cpc	r23, r1
 c80:	81 05       	cpc	r24, r1
 c82:	91 05       	cpc	r25, r1
 c84:	51 f7       	brne	.-44     	; 0xc5a <main+0x126>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int LCDTick_period = LCDTick_calc/GCD;
 c86:	64 ef       	ldi	r22, 0xF4	; 244
 c88:	71 e0       	ldi	r23, 0x01	; 1
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	90 e0       	ldi	r25, 0x00	; 0
 c8e:	2e 2d       	mov	r18, r14
 c90:	3f 2d       	mov	r19, r15
 c92:	40 2f       	mov	r20, r16
 c94:	51 2f       	mov	r21, r17
 c96:	f9 d0       	rcall	.+498    	; 0xe8a <__udivmodsi4>
 c98:	29 01       	movw	r4, r18
 c9a:	3a 01       	movw	r6, r20
	unsigned long int ADCTick_period = ADCTick_calc/GCD;
 c9c:	68 ec       	ldi	r22, 0xC8	; 200
 c9e:	70 e0       	ldi	r23, 0x00	; 0
 ca0:	80 e0       	ldi	r24, 0x00	; 0
 ca2:	90 e0       	ldi	r25, 0x00	; 0
 ca4:	2e 2d       	mov	r18, r14
 ca6:	3f 2d       	mov	r19, r15
 ca8:	40 2f       	mov	r20, r16
 caa:	51 2f       	mov	r21, r17
 cac:	ee d0       	rcall	.+476    	; 0xe8a <__udivmodsi4>
 cae:	49 01       	movw	r8, r18
 cb0:	5a 01       	movw	r10, r20
	unsigned long int selTurTick_period = selTurTick_calc/GCD;
	unsigned long int usartSMTick_period = usartSMTick_calc/GCD;
 cb2:	64 e6       	ldi	r22, 0x64	; 100
 cb4:	70 e0       	ldi	r23, 0x00	; 0
 cb6:	80 e0       	ldi	r24, 0x00	; 0
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	2e 2d       	mov	r18, r14
 cbc:	3f 2d       	mov	r19, r15
 cbe:	40 2f       	mov	r20, r16
 cc0:	51 2f       	mov	r21, r17
 cc2:	e3 d0       	rcall	.+454    	; 0xe8a <__udivmodsi4>
	unsigned long int enemySMTick_period = enemySMTick_calc/GCD;
	unsigned long int pulseForEnemyLEDTick_period = pulseForEnemyLED_calc/GCD;

	//Declare an array of tasks
	static task task1, task2, task5, task6, task7, task8;
	task *tasks[] = { &task1, &task2, &task5, &task6, &task7, &task8};
 cc4:	8c e0       	ldi	r24, 0x0C	; 12
 cc6:	e5 e8       	ldi	r30, 0x85	; 133
 cc8:	f1 e0       	ldi	r31, 0x01	; 1
 cca:	de 01       	movw	r26, r28
 ccc:	11 96       	adiw	r26, 0x01	; 1
 cce:	01 90       	ld	r0, Z+
 cd0:	0d 92       	st	X+, r0
 cd2:	8a 95       	dec	r24
 cd4:	e1 f7       	brne	.-8      	; 0xcce <main+0x19a>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	// Task 1
	task1.state = LCD_initialize;//Task initial state.
 cd6:	eb ef       	ldi	r30, 0xFB	; 251
 cd8:	f1 e0       	ldi	r31, 0x01	; 1
 cda:	10 82       	st	Z, r1
	task1.period = LCDTick_period;//Task Period.
 cdc:	41 82       	std	Z+1, r4	; 0x01
 cde:	52 82       	std	Z+2, r5	; 0x02
 ce0:	63 82       	std	Z+3, r6	; 0x03
 ce2:	74 82       	std	Z+4, r7	; 0x04
	task1.elapsedTime = LCDTick_period;//Task current elapsed time.
 ce4:	45 82       	std	Z+5, r4	; 0x05
 ce6:	56 82       	std	Z+6, r5	; 0x06
 ce8:	67 82       	std	Z+7, r6	; 0x07
 cea:	70 86       	std	Z+8, r7	; 0x08
	task1.TickFct = &LCDTick;//Function pointer for the tick.
 cec:	8e e9       	ldi	r24, 0x9E	; 158
 cee:	94 e0       	ldi	r25, 0x04	; 4
 cf0:	92 87       	std	Z+10, r25	; 0x0a
 cf2:	81 87       	std	Z+9, r24	; 0x09

	// Task 2
	task2.state = ADC_initialize;
 cf4:	e0 ef       	ldi	r30, 0xF0	; 240
 cf6:	f1 e0       	ldi	r31, 0x01	; 1
 cf8:	10 82       	st	Z, r1
	task2.period = ADCTick_period;
 cfa:	81 82       	std	Z+1, r8	; 0x01
 cfc:	92 82       	std	Z+2, r9	; 0x02
 cfe:	a3 82       	std	Z+3, r10	; 0x03
 d00:	b4 82       	std	Z+4, r11	; 0x04
	task2.elapsedTime = ADCTick_period;
 d02:	85 82       	std	Z+5, r8	; 0x05
 d04:	96 82       	std	Z+6, r9	; 0x06
 d06:	a7 82       	std	Z+7, r10	; 0x07
 d08:	b0 86       	std	Z+8, r11	; 0x08
	task2.TickFct = &ADCTick;
 d0a:	8a e4       	ldi	r24, 0x4A	; 74
 d0c:	95 e0       	ldi	r25, 0x05	; 5
 d0e:	92 87       	std	Z+10, r25	; 0x0a
 d10:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 5
	task5.state = selTur_init;
 d12:	e5 ee       	ldi	r30, 0xE5	; 229
 d14:	f1 e0       	ldi	r31, 0x01	; 1
 d16:	10 82       	st	Z, r1
	task5.period = selTurTick_period;
 d18:	81 82       	std	Z+1, r8	; 0x01
 d1a:	92 82       	std	Z+2, r9	; 0x02
 d1c:	a3 82       	std	Z+3, r10	; 0x03
 d1e:	b4 82       	std	Z+4, r11	; 0x04
	task5.elapsedTime = selTurTick_period;
 d20:	85 82       	std	Z+5, r8	; 0x05
 d22:	96 82       	std	Z+6, r9	; 0x06
 d24:	a7 82       	std	Z+7, r10	; 0x07
 d26:	b0 86       	std	Z+8, r11	; 0x08
	task5.TickFct = &selTurTick;
 d28:	8c e6       	ldi	r24, 0x6C	; 108
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	92 87       	std	Z+10, r25	; 0x0a
 d2e:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 6
	task6.state = usartSM_init;
 d30:	ea ed       	ldi	r30, 0xDA	; 218
 d32:	f1 e0       	ldi	r31, 0x01	; 1
 d34:	10 82       	st	Z, r1
	task6.period = usartSMTick_period;
 d36:	21 83       	std	Z+1, r18	; 0x01
 d38:	32 83       	std	Z+2, r19	; 0x02
 d3a:	43 83       	std	Z+3, r20	; 0x03
 d3c:	54 83       	std	Z+4, r21	; 0x04
	task6.elapsedTime = usartSMTick_period;
 d3e:	25 83       	std	Z+5, r18	; 0x05
 d40:	36 83       	std	Z+6, r19	; 0x06
 d42:	47 83       	std	Z+7, r20	; 0x07
 d44:	50 87       	std	Z+8, r21	; 0x08
	task6.TickFct = &usartSMTick;
 d46:	87 ed       	ldi	r24, 0xD7	; 215
 d48:	92 e0       	ldi	r25, 0x02	; 2
 d4a:	92 87       	std	Z+10, r25	; 0x0a
 d4c:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 7
	task7.state = enemy_init;
 d4e:	ef ec       	ldi	r30, 0xCF	; 207
 d50:	f1 e0       	ldi	r31, 0x01	; 1
 d52:	10 82       	st	Z, r1
	task7.period = enemySMTick_period;
 d54:	21 83       	std	Z+1, r18	; 0x01
 d56:	32 83       	std	Z+2, r19	; 0x02
 d58:	43 83       	std	Z+3, r20	; 0x03
 d5a:	54 83       	std	Z+4, r21	; 0x04
	task7.elapsedTime = enemySMTick_period;
 d5c:	25 83       	std	Z+5, r18	; 0x05
 d5e:	36 83       	std	Z+6, r19	; 0x06
 d60:	47 83       	std	Z+7, r20	; 0x07
 d62:	50 87       	std	Z+8, r21	; 0x08
	task7.TickFct = &enemySMTick;
 d64:	82 e0       	ldi	r24, 0x02	; 2
 d66:	93 e0       	ldi	r25, 0x03	; 3
 d68:	92 87       	std	Z+10, r25	; 0x0a
 d6a:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 8
	task8.state = pulse_init;
 d6c:	e4 ec       	ldi	r30, 0xC4	; 196
 d6e:	f1 e0       	ldi	r31, 0x01	; 1
 d70:	10 82       	st	Z, r1
	task8.period = pulseForEnemyLEDTick_period;
 d72:	21 83       	std	Z+1, r18	; 0x01
 d74:	32 83       	std	Z+2, r19	; 0x02
 d76:	43 83       	std	Z+3, r20	; 0x03
 d78:	54 83       	std	Z+4, r21	; 0x04
	task8.elapsedTime = pulseForEnemyLEDTick_period;
 d7a:	25 83       	std	Z+5, r18	; 0x05
 d7c:	36 83       	std	Z+6, r19	; 0x06
 d7e:	47 83       	std	Z+7, r20	; 0x07
 d80:	50 87       	std	Z+8, r21	; 0x08
	task8.TickFct = &pulseForEnemyLEDTick;
 d82:	84 e9       	ldi	r24, 0x94	; 148
 d84:	91 e0       	ldi	r25, 0x01	; 1
 d86:	92 87       	std	Z+10, r25	; 0x0a
 d88:	81 87       	std	Z+9, r24	; 0x09
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 d8a:	e0 92 24 01 	sts	0x0124, r14	; 0x800124 <_avr_timer_M>
 d8e:	f0 92 25 01 	sts	0x0125, r15	; 0x800125 <_avr_timer_M+0x1>
 d92:	00 93 26 01 	sts	0x0126, r16	; 0x800126 <_avr_timer_M+0x2>
 d96:	10 93 27 01 	sts	0x0127, r17	; 0x800127 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 d9a:	e0 92 38 02 	sts	0x0238, r14	; 0x800238 <_avr_timer_cntcurr>
 d9e:	f0 92 39 02 	sts	0x0239, r15	; 0x800239 <_avr_timer_cntcurr+0x1>
 da2:	00 93 3a 02 	sts	0x023A, r16	; 0x80023a <_avr_timer_cntcurr+0x2>
 da6:	10 93 3b 02 	sts	0x023B, r17	; 0x80023b <_avr_timer_cntcurr+0x3>
	
	TimerSet(GCD);
	TimerOn();
 daa:	4c db       	rcall	.-2408   	; 0x444 <TimerOn>
	LCD_init();
 dac:	1a db       	rcall	.-2508   	; 0x3e2 <LCD_init>
	LCD_DisplayString(1, updatePlayerInfo(gold, level, health));
 dae:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <health>
 db2:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <health+0x1>
 db6:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <level>
 dba:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <level+0x1>
 dbe:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <gold>
 dc2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <gold+0x1>
 dc6:	ef dc       	rcall	.-1570   	; 0x7a6 <updatePlayerInfo>
 dc8:	bc 01       	movw	r22, r24
 dca:	81 e0       	ldi	r24, 0x01	; 1
 dcc:	22 db       	rcall	.-2492   	; 0x412 <LCD_DisplayString>
	InitADC();
 dce:	42 de       	rcall	.-892    	; 0xa54 <InitADC>
	initUSART(0);
 dd0:	80 e0       	ldi	r24, 0x00	; 0
 dd2:	98 db       	rcall	.-2256   	; 0x504 <initUSART>
	USART_Flush(0);
 dd4:	80 e0       	ldi	r24, 0x00	; 0
 dd6:	b8 db       	rcall	.-2192   	; 0x548 <USART_Flush>
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		C0 = ~PINC & 0x01; //Start
 dd8:	bb 24       	eor	r11, r11
 dda:	b3 94       	inc	r11
 ddc:	6e 01       	movw	r12, r28
 dde:	8d e0       	ldi	r24, 0x0D	; 13
 de0:	c8 0e       	add	r12, r24
 de2:	d1 1c       	adc	r13, r1
 de4:	86 b1       	in	r24, 0x06	; 6
 de6:	8b 25       	eor	r24, r11
 de8:	81 70       	andi	r24, 0x01	; 1
 dea:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <C0>
		C2 = ~PINC & 0x04; //Select "blue" turret //Best turret
 dee:	86 b1       	in	r24, 0x06	; 6
 df0:	80 95       	com	r24
 df2:	84 70       	andi	r24, 0x04	; 4
 df4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <C2>
		C3 = ~PINC & 0x08; //Select "purple" turret //Second best turret
 df8:	86 b1       	in	r24, 0x06	; 6
 dfa:	80 95       	com	r24
 dfc:	88 70       	andi	r24, 0x08	; 8
 dfe:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <C3>
		C4 = ~PINC & 0x10; //Select "green" turret //Third best turret
 e02:	86 b1       	in	r24, 0x06	; 6
 e04:	80 95       	com	r24
 e06:	80 71       	andi	r24, 0x10	; 16
 e08:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <C4>
 e0c:	de 01       	movw	r26, r28
 e0e:	11 96       	adiw	r26, 0x01	; 1
 e10:	7d 01       	movw	r14, r26
		
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 e12:	f7 01       	movw	r30, r14
 e14:	01 91       	ld	r16, Z+
 e16:	11 91       	ld	r17, Z+
 e18:	7f 01       	movw	r14, r30
 e1a:	d8 01       	movw	r26, r16
 e1c:	15 96       	adiw	r26, 0x05	; 5
 e1e:	4d 91       	ld	r20, X+
 e20:	5d 91       	ld	r21, X+
 e22:	6d 91       	ld	r22, X+
 e24:	7c 91       	ld	r23, X
 e26:	18 97       	sbiw	r26, 0x08	; 8
 e28:	11 96       	adiw	r26, 0x01	; 1
 e2a:	8d 91       	ld	r24, X+
 e2c:	9d 91       	ld	r25, X+
 e2e:	0d 90       	ld	r0, X+
 e30:	bc 91       	ld	r27, X
 e32:	a0 2d       	mov	r26, r0
 e34:	48 17       	cp	r20, r24
 e36:	59 07       	cpc	r21, r25
 e38:	6a 07       	cpc	r22, r26
 e3a:	7b 07       	cpc	r23, r27
 e3c:	81 f4       	brne	.+32     	; 0xe5e <main+0x32a>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 e3e:	f8 01       	movw	r30, r16
 e40:	80 81       	ld	r24, Z
 e42:	01 84       	ldd	r0, Z+9	; 0x09
 e44:	f2 85       	ldd	r31, Z+10	; 0x0a
 e46:	e0 2d       	mov	r30, r0
 e48:	08 2e       	mov	r0, r24
 e4a:	00 0c       	add	r0, r0
 e4c:	99 0b       	sbc	r25, r25
 e4e:	09 95       	icall
 e50:	d8 01       	movw	r26, r16
 e52:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 e54:	f8 01       	movw	r30, r16
 e56:	15 82       	std	Z+5, r1	; 0x05
 e58:	16 82       	std	Z+6, r1	; 0x06
 e5a:	17 82       	std	Z+7, r1	; 0x07
 e5c:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 e5e:	f8 01       	movw	r30, r16
 e60:	85 81       	ldd	r24, Z+5	; 0x05
 e62:	96 81       	ldd	r25, Z+6	; 0x06
 e64:	a7 81       	ldd	r26, Z+7	; 0x07
 e66:	b0 85       	ldd	r27, Z+8	; 0x08
 e68:	01 96       	adiw	r24, 0x01	; 1
 e6a:	a1 1d       	adc	r26, r1
 e6c:	b1 1d       	adc	r27, r1
 e6e:	85 83       	std	Z+5, r24	; 0x05
 e70:	96 83       	std	Z+6, r25	; 0x06
 e72:	a7 83       	std	Z+7, r26	; 0x07
 e74:	b0 87       	std	Z+8, r27	; 0x08
		C2 = ~PINC & 0x04; //Select "blue" turret //Best turret
		C3 = ~PINC & 0x08; //Select "purple" turret //Second best turret
		C4 = ~PINC & 0x10; //Select "green" turret //Third best turret
		
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 e76:	ec 14       	cp	r14, r12
 e78:	fd 04       	cpc	r15, r13
 e7a:	59 f6       	brne	.-106    	; 0xe12 <main+0x2de>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 e7c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <TimerFlag>
 e80:	88 23       	and	r24, r24
 e82:	e1 f3       	breq	.-8      	; 0xe7c <main+0x348>
		TimerFlag = 0;
 e84:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <TimerFlag>
	}
 e88:	ad cf       	rjmp	.-166    	; 0xde4 <main+0x2b0>

00000e8a <__udivmodsi4>:
 e8a:	a1 e2       	ldi	r26, 0x21	; 33
 e8c:	1a 2e       	mov	r1, r26
 e8e:	aa 1b       	sub	r26, r26
 e90:	bb 1b       	sub	r27, r27
 e92:	fd 01       	movw	r30, r26
 e94:	0d c0       	rjmp	.+26     	; 0xeb0 <__udivmodsi4_ep>

00000e96 <__udivmodsi4_loop>:
 e96:	aa 1f       	adc	r26, r26
 e98:	bb 1f       	adc	r27, r27
 e9a:	ee 1f       	adc	r30, r30
 e9c:	ff 1f       	adc	r31, r31
 e9e:	a2 17       	cp	r26, r18
 ea0:	b3 07       	cpc	r27, r19
 ea2:	e4 07       	cpc	r30, r20
 ea4:	f5 07       	cpc	r31, r21
 ea6:	20 f0       	brcs	.+8      	; 0xeb0 <__udivmodsi4_ep>
 ea8:	a2 1b       	sub	r26, r18
 eaa:	b3 0b       	sbc	r27, r19
 eac:	e4 0b       	sbc	r30, r20
 eae:	f5 0b       	sbc	r31, r21

00000eb0 <__udivmodsi4_ep>:
 eb0:	66 1f       	adc	r22, r22
 eb2:	77 1f       	adc	r23, r23
 eb4:	88 1f       	adc	r24, r24
 eb6:	99 1f       	adc	r25, r25
 eb8:	1a 94       	dec	r1
 eba:	69 f7       	brne	.-38     	; 0xe96 <__udivmodsi4_loop>
 ebc:	60 95       	com	r22
 ebe:	70 95       	com	r23
 ec0:	80 95       	com	r24
 ec2:	90 95       	com	r25
 ec4:	9b 01       	movw	r18, r22
 ec6:	ac 01       	movw	r20, r24
 ec8:	bd 01       	movw	r22, r26
 eca:	cf 01       	movw	r24, r30
 ecc:	08 95       	ret

00000ece <__tablejump2__>:
 ece:	ee 0f       	add	r30, r30
 ed0:	ff 1f       	adc	r31, r31
 ed2:	00 24       	eor	r0, r0
 ed4:	00 1c       	adc	r0, r0
 ed6:	0b be       	out	0x3b, r0	; 59
 ed8:	07 90       	elpm	r0, Z+
 eda:	f6 91       	elpm	r31, Z
 edc:	e0 2d       	mov	r30, r0
 ede:	09 94       	ijmp

00000ee0 <strcat>:
 ee0:	fb 01       	movw	r30, r22
 ee2:	dc 01       	movw	r26, r24
 ee4:	0d 90       	ld	r0, X+
 ee6:	00 20       	and	r0, r0
 ee8:	e9 f7       	brne	.-6      	; 0xee4 <strcat+0x4>
 eea:	11 97       	sbiw	r26, 0x01	; 1
 eec:	01 90       	ld	r0, Z+
 eee:	0d 92       	st	X+, r0
 ef0:	00 20       	and	r0, r0
 ef2:	e1 f7       	brne	.-8      	; 0xeec <strcat+0xc>
 ef4:	08 95       	ret

00000ef6 <strcpy>:
 ef6:	fb 01       	movw	r30, r22
 ef8:	dc 01       	movw	r26, r24
 efa:	01 90       	ld	r0, Z+
 efc:	0d 92       	st	X+, r0
 efe:	00 20       	and	r0, r0
 f00:	e1 f7       	brne	.-8      	; 0xefa <strcpy+0x4>
 f02:	08 95       	ret

00000f04 <__itoa_ncheck>:
 f04:	bb 27       	eor	r27, r27
 f06:	4a 30       	cpi	r20, 0x0A	; 10
 f08:	31 f4       	brne	.+12     	; 0xf16 <__itoa_ncheck+0x12>
 f0a:	99 23       	and	r25, r25
 f0c:	22 f4       	brpl	.+8      	; 0xf16 <__itoa_ncheck+0x12>
 f0e:	bd e2       	ldi	r27, 0x2D	; 45
 f10:	90 95       	com	r25
 f12:	81 95       	neg	r24
 f14:	9f 4f       	sbci	r25, 0xFF	; 255
 f16:	01 c0       	rjmp	.+2      	; 0xf1a <__utoa_common>

00000f18 <__utoa_ncheck>:
 f18:	bb 27       	eor	r27, r27

00000f1a <__utoa_common>:
 f1a:	fb 01       	movw	r30, r22
 f1c:	55 27       	eor	r21, r21
 f1e:	aa 27       	eor	r26, r26
 f20:	88 0f       	add	r24, r24
 f22:	99 1f       	adc	r25, r25
 f24:	aa 1f       	adc	r26, r26
 f26:	a4 17       	cp	r26, r20
 f28:	10 f0       	brcs	.+4      	; 0xf2e <__utoa_common+0x14>
 f2a:	a4 1b       	sub	r26, r20
 f2c:	83 95       	inc	r24
 f2e:	50 51       	subi	r21, 0x10	; 16
 f30:	b9 f7       	brne	.-18     	; 0xf20 <__utoa_common+0x6>
 f32:	a0 5d       	subi	r26, 0xD0	; 208
 f34:	aa 33       	cpi	r26, 0x3A	; 58
 f36:	08 f0       	brcs	.+2      	; 0xf3a <__utoa_common+0x20>
 f38:	a9 5d       	subi	r26, 0xD9	; 217
 f3a:	a1 93       	st	Z+, r26
 f3c:	00 97       	sbiw	r24, 0x00	; 0
 f3e:	79 f7       	brne	.-34     	; 0xf1e <__utoa_common+0x4>
 f40:	b1 11       	cpse	r27, r1
 f42:	b1 93       	st	Z+, r27
 f44:	11 92       	st	Z+, r1
 f46:	cb 01       	movw	r24, r22
 f48:	00 c0       	rjmp	.+0      	; 0xf4a <strrev>

00000f4a <strrev>:
 f4a:	dc 01       	movw	r26, r24
 f4c:	fc 01       	movw	r30, r24
 f4e:	67 2f       	mov	r22, r23
 f50:	71 91       	ld	r23, Z+
 f52:	77 23       	and	r23, r23
 f54:	e1 f7       	brne	.-8      	; 0xf4e <strrev+0x4>
 f56:	32 97       	sbiw	r30, 0x02	; 2
 f58:	04 c0       	rjmp	.+8      	; 0xf62 <strrev+0x18>
 f5a:	7c 91       	ld	r23, X
 f5c:	6d 93       	st	X+, r22
 f5e:	70 83       	st	Z, r23
 f60:	62 91       	ld	r22, -Z
 f62:	ae 17       	cp	r26, r30
 f64:	bf 07       	cpc	r27, r31
 f66:	c8 f3       	brcs	.-14     	; 0xf5a <strrev+0x10>
 f68:	08 95       	ret

00000f6a <_exit>:
 f6a:	f8 94       	cli

00000f6c <__stop_program>:
 f6c:	ff cf       	rjmp	.-2      	; 0xf6c <__stop_program>
