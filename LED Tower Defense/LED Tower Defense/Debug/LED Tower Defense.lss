
LED Tower Defense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  0000094e  000009e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000094e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  008001ae  008001ae  00000a90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ae  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b58  00000000  00000000  000025ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7f  00000000  00000000  00003106  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003c88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000979  00000000  00000000  00003ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dff  00000000  00000000  0000486d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	a5 c1       	rjmp	.+842    	; 0x380 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	f4 00       	.word	0x00f4	; ????
  8e:	a3 00       	.word	0x00a3	; ????
  90:	be 00       	.word	0x00be	; ????
  92:	f4 00       	.word	0x00f4	; ????
  94:	c5 00       	.word	0x00c5	; ????
  96:	f4 00       	.word	0x00f4	; ????
  98:	cc 00       	.word	0x00cc	; ????
  9a:	f4 00       	.word	0x00f4	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ee e4       	ldi	r30, 0x4E	; 78
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	ae 3a       	cpi	r26, 0xAE	; 174
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	ae ea       	ldi	r26, 0xAE	; 174
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a6 32       	cpi	r26, 0x26	; 38
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	90 d2       	rcall	.+1312   	; 0x5f4 <main>
  d4:	3a c4       	rjmp	.+2164   	; 0x94a <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <sNpTick>:
	strcat(updatedInfo, temp3);
	itoa(newHealth, buffer, 10);
	strcat(updatedInfo, buffer);

	return updatedInfo;
}
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	91 05       	cpc	r25, r1
  dc:	e1 f0       	breq	.+56     	; 0x116 <sNpTick+0x3e>
  de:	34 f4       	brge	.+12     	; 0xec <sNpTick+0x14>
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	59 f0       	breq	.+22     	; 0xfa <sNpTick+0x22>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	59 f0       	breq	.+22     	; 0x100 <sNpTick+0x28>
  ea:	08 95       	ret
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	91 05       	cpc	r25, r1
  f0:	c9 f0       	breq	.+50     	; 0x124 <sNpTick+0x4c>
  f2:	1c f0       	brlt	.+6      	; 0xfa <sNpTick+0x22>
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	f1 f4       	brne	.+60     	; 0x136 <sNpTick+0x5e>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret
 100:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <C0>
 104:	22 23       	and	r18, r18
 106:	b9 f0       	breq	.+46     	; 0x136 <sNpTick+0x5e>
 108:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <inGame>
 10c:	81 11       	cpse	r24, r1
 10e:	11 c0       	rjmp	.+34     	; 0x132 <sNpTick+0x5a>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <C0>
 11a:	21 11       	cpse	r18, r1
 11c:	0c c0       	rjmp	.+24     	; 0x136 <sNpTick+0x5e>
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret
 124:	20 91 0d 02 	lds	r18, 0x020D	; 0x80020d <C0>
 128:	21 11       	cpse	r18, r1
 12a:	05 c0       	rjmp	.+10     	; 0x136 <sNpTick+0x5e>
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <selTurTick>:
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	91 05       	cpc	r25, r1
 13c:	a0 f5       	brcc	.+104    	; 0x1a6 <selTurTick+0x6e>
 13e:	fc 01       	movw	r30, r24
 140:	ea 5b       	subi	r30, 0xBA	; 186
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	f9 c3       	rjmp	.+2034   	; 0x938 <__tablejump2__>
 146:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <C2>
 14a:	22 23       	and	r18, r18
 14c:	29 f0       	breq	.+10     	; 0x158 <selTurTick+0x20>
 14e:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <inGame>
 152:	22 23       	and	r18, r18
 154:	89 f1       	breq	.+98     	; 0x1b8 <selTurTick+0x80>
 156:	08 95       	ret
 158:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <C3>
 15c:	22 23       	and	r18, r18
 15e:	29 f0       	breq	.+10     	; 0x16a <selTurTick+0x32>
 160:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <inGame>
 164:	22 23       	and	r18, r18
 166:	81 f1       	breq	.+96     	; 0x1c8 <selTurTick+0x90>
 168:	08 95       	ret
 16a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <C4>
 16e:	22 23       	and	r18, r18
 170:	e9 f1       	breq	.+122    	; 0x1ec <selTurTick+0xb4>
 172:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <inGame>
 176:	22 23       	and	r18, r18
 178:	79 f1       	breq	.+94     	; 0x1d8 <selTurTick+0xa0>
 17a:	08 95       	ret
 17c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <C2>
 180:	81 11       	cpse	r24, r1
 182:	1a c0       	rjmp	.+52     	; 0x1b8 <selTurTick+0x80>
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret
 18a:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <C3>
 18e:	81 11       	cpse	r24, r1
 190:	1b c0       	rjmp	.+54     	; 0x1c8 <selTurTick+0x90>
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret
 198:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <C4>
 19c:	81 11       	cpse	r24, r1
 19e:	1c c0       	rjmp	.+56     	; 0x1d8 <selTurTick+0xa0>
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	08 95       	ret
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	91 05       	cpc	r25, r1
 1aa:	71 f0       	breq	.+28     	; 0x1c8 <selTurTick+0x90>
 1ac:	86 30       	cpi	r24, 0x06	; 6
 1ae:	91 05       	cpc	r25, r1
 1b0:	99 f0       	breq	.+38     	; 0x1d8 <selTurTick+0xa0>
 1b2:	82 30       	cpi	r24, 0x02	; 2
 1b4:	91 05       	cpc	r25, r1
 1b6:	d1 f4       	brne	.+52     	; 0x1ec <selTurTick+0xb4>
 1b8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 1bc:	80 61       	ori	r24, 0x10	; 16
 1be:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret
 1c8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 1cc:	80 62       	ori	r24, 0x20	; 32
 1ce:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret
 1d8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 1dc:	80 63       	ori	r24, 0x30	; 48
 1de:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret

000001ee <LCDTick>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	91 05       	cpc	r25, r1
 1f2:	59 f0       	breq	.+22     	; 0x20a <LCDTick+0x1c>
 1f4:	1c f4       	brge	.+6      	; 0x1fc <LCDTick+0xe>
 1f6:	00 97       	sbiw	r24, 0x00	; 0
 1f8:	c9 f1       	breq	.+114    	; 0x26c <LCDTick+0x7e>
 1fa:	1b c0       	rjmp	.+54     	; 0x232 <LCDTick+0x44>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	91 05       	cpc	r25, r1
 200:	99 f0       	breq	.+38     	; 0x228 <LCDTick+0x3a>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	91 05       	cpc	r25, r1
 206:	91 f1       	breq	.+100    	; 0x26c <LCDTick+0x7e>
 208:	14 c0       	rjmp	.+40     	; 0x232 <LCDTick+0x44>
 20a:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <A2>
 20e:	21 11       	cpse	r18, r1
 210:	30 c0       	rjmp	.+96     	; 0x272 <LCDTick+0x84>
 212:	20 91 e6 01 	lds	r18, 0x01E6	; 0x8001e6 <level>
 216:	23 30       	cpi	r18, 0x03	; 3
 218:	79 f1       	breq	.+94     	; 0x278 <LCDTick+0x8a>
 21a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 21e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 222:	23 2b       	or	r18, r19
 224:	61 f1       	breq	.+88     	; 0x27e <LCDTick+0x90>
 226:	08 95       	ret
 228:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <A2>
 22c:	21 11       	cpse	r18, r1
 22e:	29 c0       	rjmp	.+82     	; 0x282 <LCDTick+0x94>
 230:	03 c0       	rjmp	.+6      	; 0x238 <LCDTick+0x4a>
 232:	83 30       	cpi	r24, 0x03	; 3
 234:	91 05       	cpc	r25, r1
 236:	29 f5       	brne	.+74     	; 0x282 <LCDTick+0x94>
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gold>
 23c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gold+0x1>
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gold+0x1>
 246:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gold>
 24a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <level>
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <level>
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 258:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 25c:	01 96       	adiw	r24, 0x01	; 1
 25e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 262:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	08 95       	ret
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	08 95       	ret
 278:	84 e0       	ldi	r24, 0x04	; 4
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	08 95       	ret
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	08 95       	ret

00000284 <delay_ms>:
 284:	18 16       	cp	r1, r24
 286:	19 06       	cpc	r1, r25
 288:	5c f0       	brlt	.+22     	; 0x2a0 <delay_ms+0x1c>
 28a:	08 95       	ret
 28c:	00 00       	nop
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	31 09       	sbc	r19, r1
 292:	e1 f7       	brne	.-8      	; 0x28c <delay_ms+0x8>
 294:	4f 5f       	subi	r20, 0xFF	; 255
 296:	5f 4f       	sbci	r21, 0xFF	; 255
 298:	48 17       	cp	r20, r24
 29a:	59 07       	cpc	r21, r25
 29c:	29 f4       	brne	.+10     	; 0x2a8 <delay_ms+0x24>
 29e:	08 95       	ret
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	77 e0       	ldi	r23, 0x07	; 7
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	27 2f       	mov	r18, r23
 2aa:	36 2f       	mov	r19, r22
 2ac:	ef cf       	rjmp	.-34     	; 0x28c <delay_ms+0x8>

000002ae <LCD_WriteCommand>:
 2ae:	5c 98       	cbi	0x0b, 4	; 11
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	5d 9a       	sbi	0x0b, 5	; 11
 2b4:	00 00       	nop
 2b6:	5d 98       	cbi	0x0b, 5	; 11
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	e3 cf       	rjmp	.-58     	; 0x284 <delay_ms>
 2be:	08 95       	ret

000002c0 <LCD_ClearScreen>:
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	f5 cf       	rjmp	.-22     	; 0x2ae <LCD_WriteCommand>
 2c4:	08 95       	ret

000002c6 <LCD_Cursor>:
 2c6:	81 31       	cpi	r24, 0x11	; 17
 2c8:	18 f4       	brcc	.+6      	; 0x2d0 <LCD_Cursor+0xa>
 2ca:	81 58       	subi	r24, 0x81	; 129
 2cc:	f0 cf       	rjmp	.-32     	; 0x2ae <LCD_WriteCommand>
 2ce:	08 95       	ret
 2d0:	81 55       	subi	r24, 0x51	; 81
 2d2:	ed cf       	rjmp	.-38     	; 0x2ae <LCD_WriteCommand>
 2d4:	08 95       	ret

000002d6 <LCD_init>:
 2d6:	84 e6       	ldi	r24, 0x64	; 100
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	d4 df       	rcall	.-88     	; 0x284 <delay_ms>
 2dc:	88 e3       	ldi	r24, 0x38	; 56
 2de:	e7 df       	rcall	.-50     	; 0x2ae <LCD_WriteCommand>
 2e0:	86 e0       	ldi	r24, 0x06	; 6
 2e2:	e5 df       	rcall	.-54     	; 0x2ae <LCD_WriteCommand>
 2e4:	8f e0       	ldi	r24, 0x0F	; 15
 2e6:	e3 df       	rcall	.-58     	; 0x2ae <LCD_WriteCommand>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	e1 df       	rcall	.-62     	; 0x2ae <LCD_WriteCommand>
 2ec:	8a e0       	ldi	r24, 0x0A	; 10
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	c9 cf       	rjmp	.-110    	; 0x284 <delay_ms>
 2f2:	08 95       	ret

000002f4 <LCD_WriteData>:
 2f4:	5c 9a       	sbi	0x0b, 4	; 11
 2f6:	85 b9       	out	0x05, r24	; 5
 2f8:	5d 9a       	sbi	0x0b, 5	; 11
 2fa:	00 00       	nop
 2fc:	5d 98       	cbi	0x0b, 5	; 11
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	c0 cf       	rjmp	.-128    	; 0x284 <delay_ms>
 304:	08 95       	ret

00000306 <LCD_DisplayString>:
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	18 2f       	mov	r17, r24
 310:	eb 01       	movw	r28, r22
 312:	d6 df       	rcall	.-84     	; 0x2c0 <LCD_ClearScreen>
 314:	88 81       	ld	r24, Y
 316:	88 23       	and	r24, r24
 318:	51 f0       	breq	.+20     	; 0x32e <LCD_DisplayString+0x28>
 31a:	01 e0       	ldi	r16, 0x01	; 1
 31c:	01 0f       	add	r16, r17
 31e:	81 2f       	mov	r24, r17
 320:	d2 df       	rcall	.-92     	; 0x2c6 <LCD_Cursor>
 322:	89 91       	ld	r24, Y+
 324:	e7 df       	rcall	.-50     	; 0x2f4 <LCD_WriteData>
 326:	10 2f       	mov	r17, r16
 328:	88 81       	ld	r24, Y
 32a:	81 11       	cpse	r24, r1
 32c:	f6 cf       	rjmp	.-20     	; 0x31a <LCD_DisplayString+0x14>
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <TimerOn>:
 338:	8b e0       	ldi	r24, 0x0B	; 11
 33a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 33e:	8d e7       	ldi	r24, 0x7D	; 125
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 346:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 350:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 354:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 358:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 35c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 360:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 364:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 368:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_avr_timer_cntcurr>
 36c:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <_avr_timer_cntcurr+0x1>
 370:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <_avr_timer_cntcurr+0x2>
 374:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <_avr_timer_cntcurr+0x3>
 378:	8f b7       	in	r24, 0x3f	; 63
 37a:	80 68       	ori	r24, 0x80	; 128
 37c:	8f bf       	out	0x3f, r24	; 63
 37e:	08 95       	ret

00000380 <__vector_13>:
 380:	1f 92       	push	r1
 382:	0f 92       	push	r0
 384:	0f b6       	in	r0, 0x3f	; 63
 386:	0f 92       	push	r0
 388:	11 24       	eor	r1, r1
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <_avr_timer_cntcurr>
 396:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <_avr_timer_cntcurr+0x1>
 39a:	a0 91 ea 01 	lds	r26, 0x01EA	; 0x8001ea <_avr_timer_cntcurr+0x2>
 39e:	b0 91 eb 01 	lds	r27, 0x01EB	; 0x8001eb <_avr_timer_cntcurr+0x3>
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	a1 09       	sbc	r26, r1
 3a6:	b1 09       	sbc	r27, r1
 3a8:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_avr_timer_cntcurr>
 3ac:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <_avr_timer_cntcurr+0x1>
 3b0:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <_avr_timer_cntcurr+0x2>
 3b4:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <_avr_timer_cntcurr+0x3>
 3b8:	89 2b       	or	r24, r25
 3ba:	8a 2b       	or	r24, r26
 3bc:	8b 2b       	or	r24, r27
 3be:	99 f4       	brne	.+38     	; 0x3e6 <__vector_13+0x66>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <TimerFlag>
 3c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 3ca:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 3ce:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 3d2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 3d6:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <_avr_timer_cntcurr>
 3da:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <_avr_timer_cntcurr+0x1>
 3de:	a0 93 ea 01 	sts	0x01EA, r26	; 0x8001ea <_avr_timer_cntcurr+0x2>
 3e2:	b0 93 eb 01 	sts	0x01EB, r27	; 0x8001eb <_avr_timer_cntcurr+0x3>
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <initUSART>:
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	81 f0       	breq	.+32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fc:	e1 ec       	ldi	r30, 0xC1	; 193
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	88 61       	ori	r24, 0x18	; 24
 404:	80 83       	st	Z, r24
 406:	e2 ec       	ldi	r30, 0xC2	; 194
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	86 60       	ori	r24, 0x06	; 6
 40e:	80 83       	st	Z, r24
 410:	83 e3       	ldi	r24, 0x33	; 51
 412:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 416:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 41a:	08 95       	ret
 41c:	e9 ec       	ldi	r30, 0xC9	; 201
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	88 61       	ori	r24, 0x18	; 24
 424:	80 83       	st	Z, r24
 426:	ea ec       	ldi	r30, 0xCA	; 202
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	86 60       	ori	r24, 0x06	; 6
 42e:	80 83       	st	Z, r24
 430:	83 e3       	ldi	r24, 0x33	; 51
 432:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 436:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 43a:	08 95       	ret

0000043c <USART_Flush>:
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	29 f4       	brne	.+10     	; 0x44a <USART_Flush+0xe>
 440:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 444:	88 23       	and	r24, r24
 446:	84 f0       	brlt	.+32     	; 0x468 <USART_Flush+0x2c>
 448:	08 95       	ret
 44a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 44e:	88 23       	and	r24, r24
 450:	ac f4       	brge	.+42     	; 0x47c <USART_Flush+0x40>
 452:	a6 ec       	ldi	r26, 0xC6	; 198
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	e0 ec       	ldi	r30, 0xC0	; 192
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	8c 91       	ld	r24, X
 45c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <dummy.1786>
 460:	80 81       	ld	r24, Z
 462:	88 23       	and	r24, r24
 464:	d4 f3       	brlt	.-12     	; 0x45a <USART_Flush+0x1e>
 466:	08 95       	ret
 468:	ae ec       	ldi	r26, 0xCE	; 206
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e8 ec       	ldi	r30, 0xC8	; 200
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	8c 91       	ld	r24, X
 472:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <dummy.1786>
 476:	80 81       	ld	r24, Z
 478:	88 23       	and	r24, r24
 47a:	d4 f3       	brlt	.-12     	; 0x470 <USART_Flush+0x34>
 47c:	08 95       	ret

0000047e <USART_Send>:
 47e:	61 30       	cpi	r22, 0x01	; 1
 480:	41 f0       	breq	.+16     	; 0x492 <USART_Send+0x14>
 482:	e0 ec       	ldi	r30, 0xC0	; 192
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	90 81       	ld	r25, Z
 488:	95 ff       	sbrs	r25, 5
 48a:	fd cf       	rjmp	.-6      	; 0x486 <USART_Send+0x8>
 48c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 490:	08 95       	ret
 492:	e8 ec       	ldi	r30, 0xC8	; 200
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	90 81       	ld	r25, Z
 498:	95 ff       	sbrs	r25, 5
 49a:	fd cf       	rjmp	.-6      	; 0x496 <USART_Send+0x18>
 49c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4a0:	08 95       	ret

000004a2 <usartSMTick>:
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	91 05       	cpc	r25, r1
 4a6:	18 f0       	brcs	.+6      	; 0x4ae <usartSMTick+0xc>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	91 05       	cpc	r25, r1
 4ac:	79 f4       	brne	.+30     	; 0x4cc <usartSMTick+0x2a>
 4ae:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4b2:	85 ff       	sbrs	r24, 5
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <usartSMTick+0x26>
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 4bc:	e0 df       	rcall	.-64     	; 0x47e <USART_Send>
 4be:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <outgoingByte>
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	08 95       	ret
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	08 95       	ret

000004ce <InitADC>:

void InitADC(void)
{
	ADMUX|=(1<<REFS0);
 4ce:	ec e7       	ldi	r30, 0x7C	; 124
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	80 81       	ld	r24, Z
 4d4:	80 64       	ori	r24, 0x40	; 64
 4d6:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
 4d8:	ea e7       	ldi	r30, 0x7A	; 122
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	87 68       	ori	r24, 0x87	; 135
 4e0:	80 83       	st	Z, r24
 4e2:	08 95       	ret

000004e4 <readadc>:
}

int readadc(int ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 4e4:	ec e7       	ldi	r30, 0x7C	; 124
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	20 81       	ld	r18, Z
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}

int readadc(int ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
 4ea:	87 70       	andi	r24, 0x07	; 7
 4ec:	99 27       	eor	r25, r25
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 4ee:	28 7f       	andi	r18, 0xF8	; 248
 4f0:	82 2b       	or	r24, r18
 4f2:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
 4f4:	ea e7       	ldi	r30, 0x7A	; 122
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 64       	ori	r24, 0x40	; 64
 4fc:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
 4fe:	80 81       	ld	r24, Z
 500:	86 fd       	sbrc	r24, 6
 502:	fd cf       	rjmp	.-6      	; 0x4fe <readadc+0x1a>
	return(ADC);        //RETURN ADC VALUE
 504:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 508:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 50c:	08 95       	ret

0000050e <ADCTick>:
}

enum ADC_States{ADC_initialize, ADC_display};

int ADCTick(int state){
	switch(state){
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	91 05       	cpc	r25, r1
 512:	20 f0       	brcs	.+8      	; 0x51c <ADCTick+0xe>
		case ADC_initialize: state = ADC_display; break;
		case ADC_display: state = ADC_display; break;
	}
	switch(state){
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	91 05       	cpc	r25, r1
 518:	09 f0       	breq	.+2      	; 0x51c <ADCTick+0xe>
 51a:	6b c0       	rjmp	.+214    	; 0x5f2 <ADCTick+0xe4>
		case ADC_initialize: break;
		case ADC_display:
			LCD_Cursor(1);
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	d3 de       	rcall	.-602    	; 0x2c6 <LCD_Cursor>
			x2 = readadc(0);
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	df df       	rcall	.-66     	; 0x4e4 <readadc>
 526:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <x2+0x1>
 52a:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <x2>
			y2 = readadc(1);
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	d8 df       	rcall	.-80     	; 0x4e4 <readadc>
			x2 = x2 - 512;
 534:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <x2>
 538:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <x2+0x1>
 53c:	32 50       	subi	r19, 0x02	; 2
 53e:	30 93 0b 02 	sts	0x020B, r19	; 0x80020b <x2+0x1>
 542:	20 93 0a 02 	sts	0x020A, r18	; 0x80020a <x2>
			y2 = y2 - 512;
 546:	92 50       	subi	r25, 0x02	; 2
 548:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <y2+0x1>
 54c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <y2>
			//LCD_DisplayString(1, itoa(x2, a, 10)); //Must disabled ClearScreen() in LCD_DisplayString() in io.c to see coordinates.
			//LCD_DisplayString(17, itoa(y2, b, 10));
			if(y2 > 150){
 550:	87 39       	cpi	r24, 0x97	; 151
 552:	91 05       	cpc	r25, r1
 554:	7c f0       	brlt	.+30     	; 0x574 <ADCTick+0x66>
				LCD_DisplayString(1, "right");
 556:	67 e7       	ldi	r22, 0x77	; 119
 558:	71 e0       	ldi	r23, 0x01	; 1
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	d4 de       	rcall	.-600    	; 0x306 <LCD_DisplayString>
				joystickMovement = 0x08;
 55e:	88 e0       	ldi	r24, 0x08	; 8
 560:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 564:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 568:	88 60       	ori	r24, 0x08	; 8
 56a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	08 95       	ret
			} else if(y2 < -150){
 574:	8a 36       	cpi	r24, 0x6A	; 106
 576:	9f 4f       	sbci	r25, 0xFF	; 255
 578:	7c f4       	brge	.+30     	; 0x598 <ADCTick+0x8a>
				LCD_DisplayString(1, "left");
 57a:	6d e7       	ldi	r22, 0x7D	; 125
 57c:	71 e0       	ldi	r23, 0x01	; 1
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	c2 de       	rcall	.-636    	; 0x306 <LCD_DisplayString>
				joystickMovement = 0x04;
 582:	84 e0       	ldi	r24, 0x04	; 4
 584:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 588:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 58c:	84 60       	ori	r24, 0x04	; 4
 58e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	08 95       	ret
			} else if(x2 < -150){
 598:	2a 36       	cpi	r18, 0x6A	; 106
 59a:	8f ef       	ldi	r24, 0xFF	; 255
 59c:	38 07       	cpc	r19, r24
 59e:	7c f4       	brge	.+30     	; 0x5be <ADCTick+0xb0>
				LCD_DisplayString(1, "up");
 5a0:	62 e8       	ldi	r22, 0x82	; 130
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	af de       	rcall	.-674    	; 0x306 <LCD_DisplayString>
				joystickMovement = 0x01;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 5ae:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 5b2:	81 60       	ori	r24, 0x01	; 1
 5b4:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	08 95       	ret
			} else if(x2 > 150){
 5be:	27 39       	cpi	r18, 0x97	; 151
 5c0:	31 05       	cpc	r19, r1
 5c2:	7c f0       	brlt	.+30     	; 0x5e2 <ADCTick+0xd4>
				LCD_DisplayString(1, "down");
 5c4:	65 e8       	ldi	r22, 0x85	; 133
 5c6:	71 e0       	ldi	r23, 0x01	; 1
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	9d de       	rcall	.-710    	; 0x306 <LCD_DisplayString>
				joystickMovement = 0x02;
 5cc:	82 e0       	ldi	r24, 0x02	; 2
 5ce:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 5d2:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <outgoingByte>
 5d6:	82 60       	ori	r24, 0x02	; 2
 5d8:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <outgoingByte>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	08 95       	ret
			} else{
				LCD_DisplayString(1, "no input");
 5e2:	6a e8       	ldi	r22, 0x8A	; 138
 5e4:	71 e0       	ldi	r23, 0x01	; 1
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	8e de       	rcall	.-740    	; 0x306 <LCD_DisplayString>
				joystickMovement = 0x00;
 5ea:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <joystickMovement>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
				outgoingByte = outgoingByte | joystickMovement;
			}
			break;
	}
	return state;
}
 5f2:	08 95       	ret

000005f4 <main>:
}

//End FSMs

int main(void)
{
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	2a 97       	sbiw	r28, 0x0a	; 10
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF; //Inputs. Using A0 and A1 as inputs for 2-axis joystick
 608:	11 b8       	out	0x01, r1	; 1
 60a:	8f ef       	ldi	r24, 0xFF	; 255
 60c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //LCD Display, output to PORTB
 60e:	84 b9       	out	0x04, r24	; 4
 610:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF; //Inputs. Using C0-C5 as user input
 612:	17 b8       	out	0x07, r1	; 7
 614:	88 b9       	out	0x08, r24	; 8
	//DDRD = 0x03; PORTD = 0xFC; //Using D0 and D1 as outputs(control bus) and D2-D7 as inputs
	DDRD = 0x30; PORTD = 0xCF; //D4 and D5 are outputs(control bus). D0 - D3 are RXD0, TXD0, RXD1, and TXD1 (UART Functionality)
 616:	80 e3       	ldi	r24, 0x30	; 48
 618:	8a b9       	out	0x0a, r24	; 10
 61a:	8f ec       	ldi	r24, 0xCF	; 207
 61c:	8b b9       	out	0x0b, r24	; 11
 61e:	0f 2e       	mov	r0, r31
 620:	f8 ec       	ldi	r31, 0xC8	; 200
 622:	bf 2e       	mov	r11, r31
 624:	f0 2d       	mov	r31, r0
 626:	a1 2c       	mov	r10, r1
 628:	91 2c       	mov	r9, r1
 62a:	81 2c       	mov	r8, r1
 62c:	54 ef       	ldi	r21, 0xF4	; 244
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	20 e0       	ldi	r18, 0x00	; 0
 634:	04 c0       	rjmp	.+8      	; 0x63e <main+0x4a>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 636:	b6 2e       	mov	r11, r22
 638:	a7 2e       	mov	r10, r23
 63a:	98 2e       	mov	r9, r24
 63c:	89 2e       	mov	r8, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 63e:	65 2f       	mov	r22, r21
 640:	74 2f       	mov	r23, r20
 642:	83 2f       	mov	r24, r19
 644:	92 2f       	mov	r25, r18
 646:	2b 2d       	mov	r18, r11
 648:	3a 2d       	mov	r19, r10
 64a:	49 2d       	mov	r20, r9
 64c:	58 2d       	mov	r21, r8
 64e:	52 d1       	rcall	.+676    	; 0x8f4 <__udivmodsi4>
 650:	5b 2d       	mov	r21, r11
 652:	4a 2d       	mov	r20, r10
 654:	39 2d       	mov	r19, r9
 656:	28 2d       	mov	r18, r8
		if( c == 0 ) { return b; }
 658:	61 15       	cp	r22, r1
 65a:	71 05       	cpc	r23, r1
 65c:	81 05       	cpc	r24, r1
 65e:	91 05       	cpc	r25, r1
 660:	51 f7       	brne	.-44     	; 0x636 <main+0x42>
 662:	18 ec       	ldi	r17, 0xC8	; 200
 664:	00 e0       	ldi	r16, 0x00	; 0
 666:	f1 2c       	mov	r15, r1
 668:	e1 2c       	mov	r14, r1
 66a:	04 c0       	rjmp	.+8      	; 0x674 <main+0x80>
		a = b;
		b = c;
 66c:	16 2f       	mov	r17, r22
 66e:	07 2f       	mov	r16, r23
 670:	f8 2e       	mov	r15, r24
 672:	e9 2e       	mov	r14, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 674:	6b 2d       	mov	r22, r11
 676:	7a 2d       	mov	r23, r10
 678:	89 2d       	mov	r24, r9
 67a:	98 2d       	mov	r25, r8
 67c:	21 2f       	mov	r18, r17
 67e:	30 2f       	mov	r19, r16
 680:	4f 2d       	mov	r20, r15
 682:	5e 2d       	mov	r21, r14
 684:	37 d1       	rcall	.+622    	; 0x8f4 <__udivmodsi4>
 686:	b1 2e       	mov	r11, r17
 688:	a0 2e       	mov	r10, r16
 68a:	9f 2c       	mov	r9, r15
 68c:	8e 2c       	mov	r8, r14
		if( c == 0 ) { return b; }
 68e:	61 15       	cp	r22, r1
 690:	71 05       	cpc	r23, r1
 692:	81 05       	cpc	r24, r1
 694:	91 05       	cpc	r25, r1
 696:	51 f7       	brne	.-44     	; 0x66c <main+0x78>
 698:	0f 2e       	mov	r0, r31
 69a:	f8 ec       	ldi	r31, 0xC8	; 200
 69c:	bf 2e       	mov	r11, r31
 69e:	f0 2d       	mov	r31, r0
 6a0:	a1 2c       	mov	r10, r1
 6a2:	91 2c       	mov	r9, r1
 6a4:	81 2c       	mov	r8, r1
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <main+0xbc>
		a = b;
		b = c;
 6a8:	b6 2e       	mov	r11, r22
 6aa:	a7 2e       	mov	r10, r23
 6ac:	98 2e       	mov	r9, r24
 6ae:	89 2e       	mov	r8, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 6b0:	61 2f       	mov	r22, r17
 6b2:	70 2f       	mov	r23, r16
 6b4:	8f 2d       	mov	r24, r15
 6b6:	9e 2d       	mov	r25, r14
 6b8:	2b 2d       	mov	r18, r11
 6ba:	3a 2d       	mov	r19, r10
 6bc:	49 2d       	mov	r20, r9
 6be:	58 2d       	mov	r21, r8
 6c0:	19 d1       	rcall	.+562    	; 0x8f4 <__udivmodsi4>
 6c2:	1b 2d       	mov	r17, r11
 6c4:	0a 2d       	mov	r16, r10
 6c6:	f9 2c       	mov	r15, r9
 6c8:	e8 2c       	mov	r14, r8
		if( c == 0 ) { return b; }
 6ca:	61 15       	cp	r22, r1
 6cc:	71 05       	cpc	r23, r1
 6ce:	81 05       	cpc	r24, r1
 6d0:	91 05       	cpc	r25, r1
 6d2:	51 f7       	brne	.-44     	; 0x6a8 <main+0xb4>
 6d4:	0f 2e       	mov	r0, r31
 6d6:	f4 e6       	ldi	r31, 0x64	; 100
 6d8:	ef 2e       	mov	r14, r31
 6da:	f0 2d       	mov	r31, r0
 6dc:	f1 2c       	mov	r15, r1
 6de:	00 e0       	ldi	r16, 0x00	; 0
 6e0:	10 e0       	ldi	r17, 0x00	; 0
 6e2:	04 c0       	rjmp	.+8      	; 0x6ec <main+0xf8>
		a = b;
		b = c;
 6e4:	e6 2e       	mov	r14, r22
 6e6:	f7 2e       	mov	r15, r23
 6e8:	08 2f       	mov	r16, r24
 6ea:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 6ec:	6b 2d       	mov	r22, r11
 6ee:	7a 2d       	mov	r23, r10
 6f0:	89 2d       	mov	r24, r9
 6f2:	98 2d       	mov	r25, r8
 6f4:	2e 2d       	mov	r18, r14
 6f6:	3f 2d       	mov	r19, r15
 6f8:	40 2f       	mov	r20, r16
 6fa:	51 2f       	mov	r21, r17
 6fc:	fb d0       	rcall	.+502    	; 0x8f4 <__udivmodsi4>
 6fe:	be 2c       	mov	r11, r14
 700:	af 2c       	mov	r10, r15
 702:	90 2e       	mov	r9, r16
 704:	81 2e       	mov	r8, r17
		if( c == 0 ) { return b; }
 706:	61 15       	cp	r22, r1
 708:	71 05       	cpc	r23, r1
 70a:	81 05       	cpc	r24, r1
 70c:	91 05       	cpc	r25, r1
 70e:	51 f7       	brne	.-44     	; 0x6e4 <main+0xf0>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int LCDTick_period = LCDTick_calc/GCD;
 710:	64 ef       	ldi	r22, 0xF4	; 244
 712:	71 e0       	ldi	r23, 0x01	; 1
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	2e 2d       	mov	r18, r14
 71a:	3f 2d       	mov	r19, r15
 71c:	40 2f       	mov	r20, r16
 71e:	51 2f       	mov	r21, r17
 720:	e9 d0       	rcall	.+466    	; 0x8f4 <__udivmodsi4>
 722:	29 01       	movw	r4, r18
 724:	3a 01       	movw	r6, r20
	unsigned long int ADCTick_period = ADCTick_calc/GCD;
 726:	68 ec       	ldi	r22, 0xC8	; 200
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	2e 2d       	mov	r18, r14
 730:	3f 2d       	mov	r19, r15
 732:	40 2f       	mov	r20, r16
 734:	51 2f       	mov	r21, r17
 736:	de d0       	rcall	.+444    	; 0x8f4 <__udivmodsi4>
 738:	49 01       	movw	r8, r18
 73a:	5a 01       	movw	r10, r20
	unsigned long int sNpTick_period = sNpTick_calc/GCD;
	//unsigned long int placeTurretTick_period = placeTurretTick_calc/GCD;
	unsigned long int selTurTick_period = selTurTick_calc/GCD;
	unsigned long int usartSMTick_period = usartSMTick_calc/GCD;
 73c:	64 e6       	ldi	r22, 0x64	; 100
 73e:	70 e0       	ldi	r23, 0x00	; 0
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	2e 2d       	mov	r18, r14
 746:	3f 2d       	mov	r19, r15
 748:	40 2f       	mov	r20, r16
 74a:	51 2f       	mov	r21, r17
 74c:	d3 d0       	rcall	.+422    	; 0x8f4 <__udivmodsi4>

	//Declare an array of tasks
	static task task1, task2, task3, /*task4,*/ task5, task6;
	task *tasks[] = { &task1, &task2 ,&task3, /*&task4,*/ &task5, &task6};
 74e:	8a e0       	ldi	r24, 0x0A	; 10
 750:	e5 e6       	ldi	r30, 0x65	; 101
 752:	f1 e0       	ldi	r31, 0x01	; 1
 754:	de 01       	movw	r26, r28
 756:	11 96       	adiw	r26, 0x01	; 1
 758:	01 90       	ld	r0, Z+
 75a:	0d 92       	st	X+, r0
 75c:	8a 95       	dec	r24
 75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x164>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = LCD_initialize;//Task initial state.
 760:	ea ed       	ldi	r30, 0xDA	; 218
 762:	f1 e0       	ldi	r31, 0x01	; 1
 764:	10 82       	st	Z, r1
	task1.period = LCDTick_period;//Task Period.
 766:	41 82       	std	Z+1, r4	; 0x01
 768:	52 82       	std	Z+2, r5	; 0x02
 76a:	63 82       	std	Z+3, r6	; 0x03
 76c:	74 82       	std	Z+4, r7	; 0x04
	task1.elapsedTime = LCDTick_period;//Task current elapsed time.
 76e:	45 82       	std	Z+5, r4	; 0x05
 770:	56 82       	std	Z+6, r5	; 0x06
 772:	67 82       	std	Z+7, r6	; 0x07
 774:	70 86       	std	Z+8, r7	; 0x08
	task1.TickFct = &LCDTick;//Function pointer for the tick.
 776:	87 ef       	ldi	r24, 0xF7	; 247
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	92 87       	std	Z+10, r25	; 0x0a
 77c:	81 87       	std	Z+9, r24	; 0x09

	// Task 2
	task2.state = ADC_initialize;
 77e:	ef ec       	ldi	r30, 0xCF	; 207
 780:	f1 e0       	ldi	r31, 0x01	; 1
 782:	10 82       	st	Z, r1
	task2.period = ADCTick_period;
 784:	81 82       	std	Z+1, r8	; 0x01
 786:	92 82       	std	Z+2, r9	; 0x02
 788:	a3 82       	std	Z+3, r10	; 0x03
 78a:	b4 82       	std	Z+4, r11	; 0x04
	task2.elapsedTime = ADCTick_period;
 78c:	85 82       	std	Z+5, r8	; 0x05
 78e:	96 82       	std	Z+6, r9	; 0x06
 790:	a7 82       	std	Z+7, r10	; 0x07
 792:	b0 86       	std	Z+8, r11	; 0x08
	task2.TickFct = &ADCTick;
 794:	87 e8       	ldi	r24, 0x87	; 135
 796:	92 e0       	ldi	r25, 0x02	; 2
 798:	92 87       	std	Z+10, r25	; 0x0a
 79a:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 3
	task3.state = sNp_init;
 79c:	e4 ec       	ldi	r30, 0xC4	; 196
 79e:	f1 e0       	ldi	r31, 0x01	; 1
 7a0:	10 82       	st	Z, r1
	task3.period = sNpTick_period;
 7a2:	81 82       	std	Z+1, r8	; 0x01
 7a4:	92 82       	std	Z+2, r9	; 0x02
 7a6:	a3 82       	std	Z+3, r10	; 0x03
 7a8:	b4 82       	std	Z+4, r11	; 0x04
	task3.elapsedTime = sNpTick_period;
 7aa:	85 82       	std	Z+5, r8	; 0x05
 7ac:	96 82       	std	Z+6, r9	; 0x06
 7ae:	a7 82       	std	Z+7, r10	; 0x07
 7b0:	b0 86       	std	Z+8, r11	; 0x08
	task3.TickFct = &sNpTick;
 7b2:	8c e6       	ldi	r24, 0x6C	; 108
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	92 87       	std	Z+10, r25	; 0x0a
 7b8:	81 87       	std	Z+9, r24	; 0x09
	task4.period = placeTurretTick_period;
	task4.elapsedTime = placeTurretTick_period;
	task4.TickFct = &placeTurretTick;
	*/
	// Task 5
	task5.state = selTur_init;
 7ba:	e9 eb       	ldi	r30, 0xB9	; 185
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	10 82       	st	Z, r1
	task5.period = selTurTick_period;
 7c0:	81 82       	std	Z+1, r8	; 0x01
 7c2:	92 82       	std	Z+2, r9	; 0x02
 7c4:	a3 82       	std	Z+3, r10	; 0x03
 7c6:	b4 82       	std	Z+4, r11	; 0x04
	task5.elapsedTime = selTurTick_period;
 7c8:	85 82       	std	Z+5, r8	; 0x05
 7ca:	96 82       	std	Z+6, r9	; 0x06
 7cc:	a7 82       	std	Z+7, r10	; 0x07
 7ce:	b0 86       	std	Z+8, r11	; 0x08
	task5.TickFct = &selTurTick;
 7d0:	8c e9       	ldi	r24, 0x9C	; 156
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	92 87       	std	Z+10, r25	; 0x0a
 7d6:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 6
	task6.state = usartSM_init;
 7d8:	ee ea       	ldi	r30, 0xAE	; 174
 7da:	f1 e0       	ldi	r31, 0x01	; 1
 7dc:	10 82       	st	Z, r1
	task6.period = usartSMTick_period;
 7de:	21 83       	std	Z+1, r18	; 0x01
 7e0:	32 83       	std	Z+2, r19	; 0x02
 7e2:	43 83       	std	Z+3, r20	; 0x03
 7e4:	54 83       	std	Z+4, r21	; 0x04
	task6.elapsedTime = usartSMTick_period;
 7e6:	25 83       	std	Z+5, r18	; 0x05
 7e8:	36 83       	std	Z+6, r19	; 0x06
 7ea:	47 83       	std	Z+7, r20	; 0x07
 7ec:	50 87       	std	Z+8, r21	; 0x08
	task6.TickFct = &usartSMTick;
 7ee:	81 e5       	ldi	r24, 0x51	; 81
 7f0:	92 e0       	ldi	r25, 0x02	; 2
 7f2:	92 87       	std	Z+10, r25	; 0x0a
 7f4:	81 87       	std	Z+9, r24	; 0x09
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 7f6:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_avr_timer_M>
 7fa:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_avr_timer_M+0x1>
 7fe:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <_avr_timer_M+0x2>
 802:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 806:	e0 92 e8 01 	sts	0x01E8, r14	; 0x8001e8 <_avr_timer_cntcurr>
 80a:	f0 92 e9 01 	sts	0x01E9, r15	; 0x8001e9 <_avr_timer_cntcurr+0x1>
 80e:	00 93 ea 01 	sts	0x01EA, r16	; 0x8001ea <_avr_timer_cntcurr+0x2>
 812:	10 93 eb 01 	sts	0x01EB, r17	; 0x8001eb <_avr_timer_cntcurr+0x3>
	
	TimerSet(GCD);
	TimerOn();
 816:	90 dd       	rcall	.-1248   	; 0x338 <TimerOn>
	LCD_init();
 818:	5e dd       	rcall	.-1348   	; 0x2d6 <LCD_init>
	//LCD_DisplayString(1, playerInfo);
	InitADC();
 81a:	59 de       	rcall	.-846    	; 0x4ce <InitADC>
	initUSART(0);
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	ec dd       	rcall	.-1064   	; 0x3f8 <initUSART>
	USART_Flush(0);
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	0c de       	rcall	.-1000   	; 0x43c <USART_Flush>
	enemy *enemy[] = {};
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		A2 = ~PINA & 0x04;
		C0 = ~PINC & 0x01; //Start/Pause button
 824:	99 24       	eor	r9, r9
 826:	93 94       	inc	r9
 828:	7e 01       	movw	r14, r28
 82a:	8b e0       	ldi	r24, 0x0B	; 11
 82c:	e8 0e       	add	r14, r24
 82e:	f1 1c       	adc	r15, r1
		//If enemy makes it to the end of the map, take away from user health.
	enemy *enemy[] = {};
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		A2 = ~PINA & 0x04;
 830:	80 b1       	in	r24, 0x00	; 0
 832:	80 95       	com	r24
 834:	84 70       	andi	r24, 0x04	; 4
 836:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <A2>
		C0 = ~PINC & 0x01; //Start/Pause button
 83a:	86 b1       	in	r24, 0x06	; 6
 83c:	89 25       	eor	r24, r9
 83e:	81 70       	andi	r24, 0x01	; 1
 840:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <C0>
		C1 = ~PINC & 0x02; //Place turret button
 844:	86 b1       	in	r24, 0x06	; 6
 846:	80 95       	com	r24
 848:	82 70       	andi	r24, 0x02	; 2
 84a:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <C1>
		C2 = ~PINC & 0x04; //Select "blue" turret //Best turret
 84e:	86 b1       	in	r24, 0x06	; 6
 850:	80 95       	com	r24
 852:	84 70       	andi	r24, 0x04	; 4
 854:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <C2>
		C3 = ~PINC & 0x08; //Select "purple" turret //Second best turret
 858:	86 b1       	in	r24, 0x06	; 6
 85a:	80 95       	com	r24
 85c:	88 70       	andi	r24, 0x08	; 8
 85e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <C3>
		C4 = ~PINC & 0x10; //Select "green" turret //Third best turret
 862:	86 b1       	in	r24, 0x06	; 6
 864:	80 95       	com	r24
 866:	80 71       	andi	r24, 0x10	; 16
 868:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <C4>
		C5 = ~PINC & 0x20; //Reset
 86c:	86 b1       	in	r24, 0x06	; 6
 86e:	80 95       	com	r24
 870:	80 72       	andi	r24, 0x20	; 32
 872:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <C5>
 876:	de 01       	movw	r26, r28
 878:	11 96       	adiw	r26, 0x01	; 1
 87a:	5d 01       	movw	r10, r26

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 87c:	f5 01       	movw	r30, r10
 87e:	01 91       	ld	r16, Z+
 880:	11 91       	ld	r17, Z+
 882:	5f 01       	movw	r10, r30
 884:	d8 01       	movw	r26, r16
 886:	15 96       	adiw	r26, 0x05	; 5
 888:	4d 91       	ld	r20, X+
 88a:	5d 91       	ld	r21, X+
 88c:	6d 91       	ld	r22, X+
 88e:	7c 91       	ld	r23, X
 890:	18 97       	sbiw	r26, 0x08	; 8
 892:	11 96       	adiw	r26, 0x01	; 1
 894:	8d 91       	ld	r24, X+
 896:	9d 91       	ld	r25, X+
 898:	0d 90       	ld	r0, X+
 89a:	bc 91       	ld	r27, X
 89c:	a0 2d       	mov	r26, r0
 89e:	48 17       	cp	r20, r24
 8a0:	59 07       	cpc	r21, r25
 8a2:	6a 07       	cpc	r22, r26
 8a4:	7b 07       	cpc	r23, r27
 8a6:	81 f4       	brne	.+32     	; 0x8c8 <main+0x2d4>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 8a8:	f8 01       	movw	r30, r16
 8aa:	80 81       	ld	r24, Z
 8ac:	01 84       	ldd	r0, Z+9	; 0x09
 8ae:	f2 85       	ldd	r31, Z+10	; 0x0a
 8b0:	e0 2d       	mov	r30, r0
 8b2:	08 2e       	mov	r0, r24
 8b4:	00 0c       	add	r0, r0
 8b6:	99 0b       	sbc	r25, r25
 8b8:	09 95       	icall
 8ba:	d8 01       	movw	r26, r16
 8bc:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 8be:	f8 01       	movw	r30, r16
 8c0:	15 82       	std	Z+5, r1	; 0x05
 8c2:	16 82       	std	Z+6, r1	; 0x06
 8c4:	17 82       	std	Z+7, r1	; 0x07
 8c6:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 8c8:	f8 01       	movw	r30, r16
 8ca:	85 81       	ldd	r24, Z+5	; 0x05
 8cc:	96 81       	ldd	r25, Z+6	; 0x06
 8ce:	a7 81       	ldd	r26, Z+7	; 0x07
 8d0:	b0 85       	ldd	r27, Z+8	; 0x08
 8d2:	01 96       	adiw	r24, 0x01	; 1
 8d4:	a1 1d       	adc	r26, r1
 8d6:	b1 1d       	adc	r27, r1
 8d8:	85 83       	std	Z+5, r24	; 0x05
 8da:	96 83       	std	Z+6, r25	; 0x06
 8dc:	a7 83       	std	Z+7, r26	; 0x07
 8de:	b0 87       	std	Z+8, r27	; 0x08
		C3 = ~PINC & 0x08; //Select "purple" turret //Second best turret
		C4 = ~PINC & 0x10; //Select "green" turret //Third best turret
		C5 = ~PINC & 0x20; //Reset

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 8e0:	ae 14       	cp	r10, r14
 8e2:	bf 04       	cpc	r11, r15
 8e4:	59 f6       	brne	.-106    	; 0x87c <main+0x288>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 8e6:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <TimerFlag>
 8ea:	88 23       	and	r24, r24
 8ec:	e1 f3       	breq	.-8      	; 0x8e6 <main+0x2f2>
		TimerFlag = 0;
 8ee:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <TimerFlag>
	}
 8f2:	9e cf       	rjmp	.-196    	; 0x830 <main+0x23c>

000008f4 <__udivmodsi4>:
 8f4:	a1 e2       	ldi	r26, 0x21	; 33
 8f6:	1a 2e       	mov	r1, r26
 8f8:	aa 1b       	sub	r26, r26
 8fa:	bb 1b       	sub	r27, r27
 8fc:	fd 01       	movw	r30, r26
 8fe:	0d c0       	rjmp	.+26     	; 0x91a <__udivmodsi4_ep>

00000900 <__udivmodsi4_loop>:
 900:	aa 1f       	adc	r26, r26
 902:	bb 1f       	adc	r27, r27
 904:	ee 1f       	adc	r30, r30
 906:	ff 1f       	adc	r31, r31
 908:	a2 17       	cp	r26, r18
 90a:	b3 07       	cpc	r27, r19
 90c:	e4 07       	cpc	r30, r20
 90e:	f5 07       	cpc	r31, r21
 910:	20 f0       	brcs	.+8      	; 0x91a <__udivmodsi4_ep>
 912:	a2 1b       	sub	r26, r18
 914:	b3 0b       	sbc	r27, r19
 916:	e4 0b       	sbc	r30, r20
 918:	f5 0b       	sbc	r31, r21

0000091a <__udivmodsi4_ep>:
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	1a 94       	dec	r1
 924:	69 f7       	brne	.-38     	; 0x900 <__udivmodsi4_loop>
 926:	60 95       	com	r22
 928:	70 95       	com	r23
 92a:	80 95       	com	r24
 92c:	90 95       	com	r25
 92e:	9b 01       	movw	r18, r22
 930:	ac 01       	movw	r20, r24
 932:	bd 01       	movw	r22, r26
 934:	cf 01       	movw	r24, r30
 936:	08 95       	ret

00000938 <__tablejump2__>:
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	00 24       	eor	r0, r0
 93e:	00 1c       	adc	r0, r0
 940:	0b be       	out	0x3b, r0	; 59
 942:	07 90       	elpm	r0, Z+
 944:	f6 91       	elpm	r31, Z
 946:	e0 2d       	mov	r30, r0
 948:	09 94       	ijmp

0000094a <_exit>:
 94a:	f8 94       	cli

0000094c <__stop_program>:
 94c:	ff cf       	rjmp	.-2      	; 0x94c <__stop_program>
