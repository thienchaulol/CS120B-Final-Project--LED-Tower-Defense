
LED Tower Defense.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  000009b2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  008001b0  008001b0  00000af6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a73  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b58  00000000  00000000  000026e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd5  00000000  00000000  0000323b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003e10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f5  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000eff  00000000  00000000  00004a81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ad c1       	rjmp	.+858    	; 0x390 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c5 00       	.word	0x00c5	; ????
  8e:	c8 00       	.word	0x00c8	; ????
  90:	e7 00       	.word	0x00e7	; ????
  92:	c5 00       	.word	0x00c5	; ????
  94:	ee 00       	.word	0x00ee	; ????
  96:	c5 00       	.word	0x00c5	; ????
  98:	f5 00       	.word	0x00f5	; ????
  9a:	c5 00       	.word	0x00c5	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	e2 eb       	ldi	r30, 0xB2	; 178
  b0:	f9 e0       	ldi	r31, 0x09	; 9
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a0 3b       	cpi	r26, 0xB0	; 176
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	a0 eb       	ldi	r26, 0xB0	; 176
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a3 33       	cpi	r26, 0x33	; 51
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	98 d2       	rcall	.+1328   	; 0x604 <main>
  d4:	6c c4       	rjmp	.+2264   	; 0x9ae <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <sNpTick>:
	strcat(updatedInfo, temp3);
	itoa(newHealth, buffer, 10);
	strcat(updatedInfo, buffer);

	return updatedInfo;
}
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	91 05       	cpc	r25, r1
  dc:	e1 f0       	breq	.+56     	; 0x116 <sNpTick+0x3e>
  de:	34 f4       	brge	.+12     	; 0xec <sNpTick+0x14>
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	59 f0       	breq	.+22     	; 0xfa <sNpTick+0x22>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	91 05       	cpc	r25, r1
  e8:	59 f0       	breq	.+22     	; 0x100 <sNpTick+0x28>
  ea:	08 95       	ret
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	91 05       	cpc	r25, r1
  f0:	c9 f0       	breq	.+50     	; 0x124 <sNpTick+0x4c>
  f2:	1c f0       	brlt	.+6      	; 0xfa <sNpTick+0x22>
  f4:	85 30       	cpi	r24, 0x05	; 5
  f6:	91 05       	cpc	r25, r1
  f8:	f1 f4       	brne	.+60     	; 0x136 <sNpTick+0x5e>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	08 95       	ret
 100:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <C0>
 104:	22 23       	and	r18, r18
 106:	b9 f0       	breq	.+46     	; 0x136 <sNpTick+0x5e>
 108:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <inGame>
 10c:	81 11       	cpse	r24, r1
 10e:	11 c0       	rjmp	.+34     	; 0x132 <sNpTick+0x5a>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	08 95       	ret
 116:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <C0>
 11a:	21 11       	cpse	r18, r1
 11c:	0c c0       	rjmp	.+24     	; 0x136 <sNpTick+0x5e>
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret
 124:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <C0>
 128:	21 11       	cpse	r18, r1
 12a:	05 c0       	rjmp	.+10     	; 0x136 <sNpTick+0x5e>
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	08 95       	ret
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	08 95       	ret

00000138 <placeTurretTick>:
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	91 05       	cpc	r25, r1
 13c:	69 f0       	breq	.+26     	; 0x158 <placeTurretTick+0x20>
 13e:	1c f4       	brge	.+6      	; 0x146 <placeTurretTick+0xe>
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	39 f0       	breq	.+14     	; 0x152 <placeTurretTick+0x1a>
 144:	08 95       	ret
 146:	82 30       	cpi	r24, 0x02	; 2
 148:	91 05       	cpc	r25, r1
 14a:	89 f0       	breq	.+34     	; 0x16e <placeTurretTick+0x36>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	91 05       	cpc	r25, r1
 150:	a1 f4       	brne	.+40     	; 0x17a <placeTurretTick+0x42>
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
 158:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <C1>
 15c:	22 23       	and	r18, r18
 15e:	69 f0       	breq	.+26     	; 0x17a <placeTurretTick+0x42>
 160:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <inGame>
 164:	21 11       	cpse	r18, r1
 166:	09 c0       	rjmp	.+18     	; 0x17a <placeTurretTick+0x42>
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret
 16e:	20 91 fa 01 	lds	r18, 0x01FA	; 0x8001fa <C1>
 172:	21 11       	cpse	r18, r1
 174:	02 c0       	rjmp	.+4      	; 0x17a <placeTurretTick+0x42>
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	08 95       	ret

0000017c <selTurTick>:
 17c:	88 30       	cpi	r24, 0x08	; 8
 17e:	91 05       	cpc	r25, r1
 180:	e8 f5       	brcc	.+122    	; 0x1fc <selTurTick+0x80>
 182:	fc 01       	movw	r30, r24
 184:	ea 5b       	subi	r30, 0xBA	; 186
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	09 c4       	rjmp	.+2066   	; 0x99c <__tablejump2__>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	08 95       	ret
 190:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <C2>
 194:	22 23       	and	r18, r18
 196:	29 f0       	breq	.+10     	; 0x1a2 <selTurTick+0x26>
 198:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <inGame>
 19c:	22 23       	and	r18, r18
 19e:	61 f1       	breq	.+88     	; 0x1f8 <selTurTick+0x7c>
 1a0:	08 95       	ret
 1a2:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <C3>
 1a6:	22 23       	and	r18, r18
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <selTurTick+0x3c>
 1aa:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <inGame>
 1ae:	21 11       	cpse	r18, r1
 1b0:	25 c0       	rjmp	.+74     	; 0x1fc <selTurTick+0x80>
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	08 95       	ret
 1b8:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <C4>
 1bc:	22 23       	and	r18, r18
 1be:	f1 f0       	breq	.+60     	; 0x1fc <selTurTick+0x80>
 1c0:	20 91 32 02 	lds	r18, 0x0232	; 0x800232 <inGame>
 1c4:	21 11       	cpse	r18, r1
 1c6:	1a c0       	rjmp	.+52     	; 0x1fc <selTurTick+0x80>
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	08 95       	ret
 1ce:	20 91 19 02 	lds	r18, 0x0219	; 0x800219 <C2>
 1d2:	21 11       	cpse	r18, r1
 1d4:	13 c0       	rjmp	.+38     	; 0x1fc <selTurTick+0x80>
 1d6:	83 e0       	ldi	r24, 0x03	; 3
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
 1dc:	20 91 13 02 	lds	r18, 0x0213	; 0x800213 <C3>
 1e0:	21 11       	cpse	r18, r1
 1e2:	0c c0       	rjmp	.+24     	; 0x1fc <selTurTick+0x80>
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	08 95       	ret
 1ea:	20 91 1d 02 	lds	r18, 0x021D	; 0x80021d <C4>
 1ee:	21 11       	cpse	r18, r1
 1f0:	05 c0       	rjmp	.+10     	; 0x1fc <selTurTick+0x80>
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	08 95       	ret
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	08 95       	ret

000001fe <LCDTick>:
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	91 05       	cpc	r25, r1
 202:	59 f0       	breq	.+22     	; 0x21a <LCDTick+0x1c>
 204:	1c f4       	brge	.+6      	; 0x20c <LCDTick+0xe>
 206:	00 97       	sbiw	r24, 0x00	; 0
 208:	c9 f1       	breq	.+114    	; 0x27c <LCDTick+0x7e>
 20a:	1b c0       	rjmp	.+54     	; 0x242 <LCDTick+0x44>
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	91 05       	cpc	r25, r1
 210:	99 f0       	breq	.+38     	; 0x238 <LCDTick+0x3a>
 212:	83 30       	cpi	r24, 0x03	; 3
 214:	91 05       	cpc	r25, r1
 216:	91 f1       	breq	.+100    	; 0x27c <LCDTick+0x7e>
 218:	14 c0       	rjmp	.+40     	; 0x242 <LCDTick+0x44>
 21a:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <A2>
 21e:	21 11       	cpse	r18, r1
 220:	30 c0       	rjmp	.+96     	; 0x282 <LCDTick+0x84>
 222:	20 91 f3 01 	lds	r18, 0x01F3	; 0x8001f3 <level>
 226:	23 30       	cpi	r18, 0x03	; 3
 228:	79 f1       	breq	.+94     	; 0x288 <LCDTick+0x8a>
 22a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 22e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 232:	23 2b       	or	r18, r19
 234:	61 f1       	breq	.+88     	; 0x28e <LCDTick+0x90>
 236:	08 95       	ret
 238:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <A2>
 23c:	21 11       	cpse	r18, r1
 23e:	29 c0       	rjmp	.+82     	; 0x292 <LCDTick+0x94>
 240:	03 c0       	rjmp	.+6      	; 0x248 <LCDTick+0x4a>
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	91 05       	cpc	r25, r1
 246:	29 f5       	brne	.+74     	; 0x292 <LCDTick+0x94>
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gold>
 24c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <gold+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <gold+0x1>
 256:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gold>
 25a:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <level>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <level>
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 272:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	08 95       	ret
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	08 95       	ret
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	08 95       	ret
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	08 95       	ret
 28e:	85 e0       	ldi	r24, 0x05	; 5
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	08 95       	ret

00000294 <delay_ms>:
 294:	18 16       	cp	r1, r24
 296:	19 06       	cpc	r1, r25
 298:	5c f0       	brlt	.+22     	; 0x2b0 <delay_ms+0x1c>
 29a:	08 95       	ret
 29c:	00 00       	nop
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	31 09       	sbc	r19, r1
 2a2:	e1 f7       	brne	.-8      	; 0x29c <delay_ms+0x8>
 2a4:	4f 5f       	subi	r20, 0xFF	; 255
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	48 17       	cp	r20, r24
 2aa:	59 07       	cpc	r21, r25
 2ac:	29 f4       	brne	.+10     	; 0x2b8 <delay_ms+0x24>
 2ae:	08 95       	ret
 2b0:	40 e0       	ldi	r20, 0x00	; 0
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	77 e0       	ldi	r23, 0x07	; 7
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	27 2f       	mov	r18, r23
 2ba:	36 2f       	mov	r19, r22
 2bc:	ef cf       	rjmp	.-34     	; 0x29c <delay_ms+0x8>

000002be <LCD_WriteCommand>:
 2be:	5c 98       	cbi	0x0b, 4	; 11
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	5d 9a       	sbi	0x0b, 5	; 11
 2c4:	00 00       	nop
 2c6:	5d 98       	cbi	0x0b, 5	; 11
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	e3 cf       	rjmp	.-58     	; 0x294 <delay_ms>
 2ce:	08 95       	ret

000002d0 <LCD_ClearScreen>:
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	f5 cf       	rjmp	.-22     	; 0x2be <LCD_WriteCommand>
 2d4:	08 95       	ret

000002d6 <LCD_Cursor>:
 2d6:	81 31       	cpi	r24, 0x11	; 17
 2d8:	18 f4       	brcc	.+6      	; 0x2e0 <LCD_Cursor+0xa>
 2da:	81 58       	subi	r24, 0x81	; 129
 2dc:	f0 cf       	rjmp	.-32     	; 0x2be <LCD_WriteCommand>
 2de:	08 95       	ret
 2e0:	81 55       	subi	r24, 0x51	; 81
 2e2:	ed cf       	rjmp	.-38     	; 0x2be <LCD_WriteCommand>
 2e4:	08 95       	ret

000002e6 <LCD_init>:
 2e6:	84 e6       	ldi	r24, 0x64	; 100
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	d4 df       	rcall	.-88     	; 0x294 <delay_ms>
 2ec:	88 e3       	ldi	r24, 0x38	; 56
 2ee:	e7 df       	rcall	.-50     	; 0x2be <LCD_WriteCommand>
 2f0:	86 e0       	ldi	r24, 0x06	; 6
 2f2:	e5 df       	rcall	.-54     	; 0x2be <LCD_WriteCommand>
 2f4:	8f e0       	ldi	r24, 0x0F	; 15
 2f6:	e3 df       	rcall	.-58     	; 0x2be <LCD_WriteCommand>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	e1 df       	rcall	.-62     	; 0x2be <LCD_WriteCommand>
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	c9 cf       	rjmp	.-110    	; 0x294 <delay_ms>
 302:	08 95       	ret

00000304 <LCD_WriteData>:
 304:	5c 9a       	sbi	0x0b, 4	; 11
 306:	85 b9       	out	0x05, r24	; 5
 308:	5d 9a       	sbi	0x0b, 5	; 11
 30a:	00 00       	nop
 30c:	5d 98       	cbi	0x0b, 5	; 11
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	c0 cf       	rjmp	.-128    	; 0x294 <delay_ms>
 314:	08 95       	ret

00000316 <LCD_DisplayString>:
 316:	0f 93       	push	r16
 318:	1f 93       	push	r17
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	18 2f       	mov	r17, r24
 320:	eb 01       	movw	r28, r22
 322:	d6 df       	rcall	.-84     	; 0x2d0 <LCD_ClearScreen>
 324:	88 81       	ld	r24, Y
 326:	88 23       	and	r24, r24
 328:	51 f0       	breq	.+20     	; 0x33e <LCD_DisplayString+0x28>
 32a:	01 e0       	ldi	r16, 0x01	; 1
 32c:	01 0f       	add	r16, r17
 32e:	81 2f       	mov	r24, r17
 330:	d2 df       	rcall	.-92     	; 0x2d6 <LCD_Cursor>
 332:	89 91       	ld	r24, Y+
 334:	e7 df       	rcall	.-50     	; 0x304 <LCD_WriteData>
 336:	10 2f       	mov	r17, r16
 338:	88 81       	ld	r24, Y
 33a:	81 11       	cpse	r24, r1
 33c:	f6 cf       	rjmp	.-20     	; 0x32a <LCD_DisplayString+0x14>
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <TimerOn>:
 348:	8b e0       	ldi	r24, 0x0B	; 11
 34a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 34e:	8d e7       	ldi	r24, 0x7D	; 125
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 356:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 360:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 364:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 368:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 36c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 370:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 374:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 378:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_avr_timer_cntcurr>
 37c:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_avr_timer_cntcurr+0x1>
 380:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <_avr_timer_cntcurr+0x2>
 384:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <_avr_timer_cntcurr+0x3>
 388:	8f b7       	in	r24, 0x3f	; 63
 38a:	80 68       	ori	r24, 0x80	; 128
 38c:	8f bf       	out	0x3f, r24	; 63
 38e:	08 95       	ret

00000390 <__vector_13>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <_avr_timer_cntcurr>
 3a6:	90 91 f6 01 	lds	r25, 0x01F6	; 0x8001f6 <_avr_timer_cntcurr+0x1>
 3aa:	a0 91 f7 01 	lds	r26, 0x01F7	; 0x8001f7 <_avr_timer_cntcurr+0x2>
 3ae:	b0 91 f8 01 	lds	r27, 0x01F8	; 0x8001f8 <_avr_timer_cntcurr+0x3>
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	a1 09       	sbc	r26, r1
 3b6:	b1 09       	sbc	r27, r1
 3b8:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_avr_timer_cntcurr>
 3bc:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_avr_timer_cntcurr+0x1>
 3c0:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <_avr_timer_cntcurr+0x2>
 3c4:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <_avr_timer_cntcurr+0x3>
 3c8:	89 2b       	or	r24, r25
 3ca:	8a 2b       	or	r24, r26
 3cc:	8b 2b       	or	r24, r27
 3ce:	99 f4       	brne	.+38     	; 0x3f6 <__vector_13+0x66>
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <TimerFlag>
 3d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 3da:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 3de:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 3e2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 3e6:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <_avr_timer_cntcurr>
 3ea:	90 93 f6 01 	sts	0x01F6, r25	; 0x8001f6 <_avr_timer_cntcurr+0x1>
 3ee:	a0 93 f7 01 	sts	0x01F7, r26	; 0x8001f7 <_avr_timer_cntcurr+0x2>
 3f2:	b0 93 f8 01 	sts	0x01F8, r27	; 0x8001f8 <_avr_timer_cntcurr+0x3>
 3f6:	bf 91       	pop	r27
 3f8:	af 91       	pop	r26
 3fa:	9f 91       	pop	r25
 3fc:	8f 91       	pop	r24
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <initUSART>:
 408:	81 30       	cpi	r24, 0x01	; 1
 40a:	81 f0       	breq	.+32     	; 0x42c <initUSART+0x24>
 40c:	e1 ec       	ldi	r30, 0xC1	; 193
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	88 61       	ori	r24, 0x18	; 24
 414:	80 83       	st	Z, r24
 416:	e2 ec       	ldi	r30, 0xC2	; 194
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	86 60       	ori	r24, 0x06	; 6
 41e:	80 83       	st	Z, r24
 420:	83 e3       	ldi	r24, 0x33	; 51
 422:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 426:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 42a:	08 95       	ret
 42c:	e9 ec       	ldi	r30, 0xC9	; 201
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	88 61       	ori	r24, 0x18	; 24
 434:	80 83       	st	Z, r24
 436:	ea ec       	ldi	r30, 0xCA	; 202
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	86 60       	ori	r24, 0x06	; 6
 43e:	80 83       	st	Z, r24
 440:	83 e3       	ldi	r24, 0x33	; 51
 442:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 446:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 44a:	08 95       	ret

0000044c <USART_Flush>:
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	29 f4       	brne	.+10     	; 0x45a <USART_Flush+0xe>
 450:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 454:	88 23       	and	r24, r24
 456:	84 f0       	brlt	.+32     	; 0x478 <USART_Flush+0x2c>
 458:	08 95       	ret
 45a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 45e:	88 23       	and	r24, r24
 460:	ac f4       	brge	.+42     	; 0x48c <USART_Flush+0x40>
 462:	a6 ec       	ldi	r26, 0xC6	; 198
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e0 ec       	ldi	r30, 0xC0	; 192
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	8c 91       	ld	r24, X
 46c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <dummy.1786>
 470:	80 81       	ld	r24, Z
 472:	88 23       	and	r24, r24
 474:	d4 f3       	brlt	.-12     	; 0x46a <USART_Flush+0x1e>
 476:	08 95       	ret
 478:	ae ec       	ldi	r26, 0xCE	; 206
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e8 ec       	ldi	r30, 0xC8	; 200
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	8c 91       	ld	r24, X
 482:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <dummy.1786>
 486:	80 81       	ld	r24, Z
 488:	88 23       	and	r24, r24
 48a:	d4 f3       	brlt	.-12     	; 0x480 <USART_Flush+0x34>
 48c:	08 95       	ret

0000048e <USART_Send>:
 48e:	61 30       	cpi	r22, 0x01	; 1
 490:	41 f0       	breq	.+16     	; 0x4a2 <USART_Send+0x14>
 492:	e0 ec       	ldi	r30, 0xC0	; 192
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	90 81       	ld	r25, Z
 498:	95 ff       	sbrs	r25, 5
 49a:	fd cf       	rjmp	.-6      	; 0x496 <USART_Send+0x8>
 49c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4a0:	08 95       	ret
 4a2:	e8 ec       	ldi	r30, 0xC8	; 200
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	90 81       	ld	r25, Z
 4a8:	95 ff       	sbrs	r25, 5
 4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <USART_Send+0x18>
 4ac:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 4b0:	08 95       	ret

000004b2 <usartSMTick>:
 4b2:	82 30       	cpi	r24, 0x02	; 2
 4b4:	91 05       	cpc	r25, r1
 4b6:	18 f0       	brcs	.+6      	; 0x4be <usartSMTick+0xc>
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	91 05       	cpc	r25, r1
 4bc:	79 f4       	brne	.+30     	; 0x4dc <usartSMTick+0x2a>
 4be:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 4c2:	85 ff       	sbrs	r24, 5
 4c4:	09 c0       	rjmp	.+18     	; 0x4d8 <usartSMTick+0x26>
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <outgoingByte>
 4cc:	e0 df       	rcall	.-64     	; 0x48e <USART_Send>
 4ce:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <outgoingByte>
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	08 95       	ret
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	08 95       	ret

000004de <InitADC>:

void InitADC(void)
{
	ADMUX|=(1<<REFS0);
 4de:	ec e7       	ldi	r30, 0x7C	; 124
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
 4e8:	ea e7       	ldi	r30, 0x7A	; 122
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	87 68       	ori	r24, 0x87	; 135
 4f0:	80 83       	st	Z, r24
 4f2:	08 95       	ret

000004f4 <readadc>:
}

int readadc(int ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 4f4:	ec e7       	ldi	r30, 0x7C	; 124
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	20 81       	ld	r18, Z
	ADCSRA|=(1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); //ENABLE ADC, PRESCALER 128
}

int readadc(int ch)
{
	ch&=0b00000111;         //ANDing to limit input to 7
 4fa:	87 70       	andi	r24, 0x07	; 7
 4fc:	99 27       	eor	r25, r25
	ADMUX = (ADMUX & 0xf8)|ch;  //Clear last 3 bits of ADMUX, OR with ch
 4fe:	28 7f       	andi	r18, 0xF8	; 248
 500:	82 2b       	or	r24, r18
 502:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADSC);        //START CONVERSION
 504:	ea e7       	ldi	r30, 0x7A	; 122
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	80 64       	ori	r24, 0x40	; 64
 50c:	80 83       	st	Z, r24
	while((ADCSRA)&(1<<ADSC));    //WAIT UNTIL CONVERSION IS COMPLETE
 50e:	80 81       	ld	r24, Z
 510:	86 fd       	sbrc	r24, 6
 512:	fd cf       	rjmp	.-6      	; 0x50e <readadc+0x1a>
	return(ADC);        //RETURN ADC VALUE
 514:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 518:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 51c:	08 95       	ret

0000051e <ADCTick>:
}

enum ADC_States{ADC_initialize, ADC_display};

int ADCTick(int state){
	switch(state){
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	91 05       	cpc	r25, r1
 522:	20 f0       	brcs	.+8      	; 0x52c <ADCTick+0xe>
		case ADC_initialize: state = ADC_display; break;
		case ADC_display: state = ADC_display; break;
	}
	switch(state){
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	91 05       	cpc	r25, r1
 528:	09 f0       	breq	.+2      	; 0x52c <ADCTick+0xe>
 52a:	6b c0       	rjmp	.+214    	; 0x602 <ADCTick+0xe4>
		case ADC_initialize: break;
		case ADC_display:
			LCD_Cursor(1);
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	d3 de       	rcall	.-602    	; 0x2d6 <LCD_Cursor>
			x2 = readadc(0);
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	df df       	rcall	.-66     	; 0x4f4 <readadc>
 536:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <x2+0x1>
 53a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <x2>
			y2 = readadc(1);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	d8 df       	rcall	.-80     	; 0x4f4 <readadc>
			x2 = x2 - 512;
 544:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <x2>
 548:	30 91 18 02 	lds	r19, 0x0218	; 0x800218 <x2+0x1>
 54c:	32 50       	subi	r19, 0x02	; 2
 54e:	30 93 18 02 	sts	0x0218, r19	; 0x800218 <x2+0x1>
 552:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <x2>
			y2 = y2 - 512;
 556:	92 50       	subi	r25, 0x02	; 2
 558:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <y2+0x1>
 55c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <y2>
			//LCD_DisplayString(1, itoa(x2, a, 10)); //Must disabled ClearScreen() in LCD_DisplayString() in io.c to see coordinates.
			//LCD_DisplayString(17, itoa(y2, b, 10));
			if(y2 > 150){
 560:	87 39       	cpi	r24, 0x97	; 151
 562:	91 05       	cpc	r25, r1
 564:	7c f0       	brlt	.+30     	; 0x584 <ADCTick+0x66>
				LCD_DisplayString(1, "right");
 566:	69 e7       	ldi	r22, 0x79	; 121
 568:	71 e0       	ldi	r23, 0x01	; 1
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	d4 de       	rcall	.-600    	; 0x316 <LCD_DisplayString>
				joystickMovement = 0x08;
 56e:	88 e0       	ldi	r24, 0x08	; 8
 570:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 574:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <outgoingByte>
 578:	88 60       	ori	r24, 0x08	; 8
 57a:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <outgoingByte>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	08 95       	ret
			} else if(y2 < -150){
 584:	8a 36       	cpi	r24, 0x6A	; 106
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	7c f4       	brge	.+30     	; 0x5a8 <ADCTick+0x8a>
				LCD_DisplayString(1, "left");
 58a:	6f e7       	ldi	r22, 0x7F	; 127
 58c:	71 e0       	ldi	r23, 0x01	; 1
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	c2 de       	rcall	.-636    	; 0x316 <LCD_DisplayString>
				joystickMovement = 0x04;
 592:	84 e0       	ldi	r24, 0x04	; 4
 594:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 598:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <outgoingByte>
 59c:	84 60       	ori	r24, 0x04	; 4
 59e:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <outgoingByte>
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	08 95       	ret
			} else if(x2 < -150){
 5a8:	2a 36       	cpi	r18, 0x6A	; 106
 5aa:	8f ef       	ldi	r24, 0xFF	; 255
 5ac:	38 07       	cpc	r19, r24
 5ae:	7c f4       	brge	.+30     	; 0x5ce <ADCTick+0xb0>
				LCD_DisplayString(1, "up");
 5b0:	64 e8       	ldi	r22, 0x84	; 132
 5b2:	71 e0       	ldi	r23, 0x01	; 1
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	af de       	rcall	.-674    	; 0x316 <LCD_DisplayString>
				joystickMovement = 0x01;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 5be:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <outgoingByte>
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <outgoingByte>
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	08 95       	ret
			} else if(x2 > 150){
 5ce:	27 39       	cpi	r18, 0x97	; 151
 5d0:	31 05       	cpc	r19, r1
 5d2:	7c f0       	brlt	.+30     	; 0x5f2 <ADCTick+0xd4>
				LCD_DisplayString(1, "down");
 5d4:	67 e8       	ldi	r22, 0x87	; 135
 5d6:	71 e0       	ldi	r23, 0x01	; 1
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	9d de       	rcall	.-710    	; 0x316 <LCD_DisplayString>
				joystickMovement = 0x02;
 5dc:	82 e0       	ldi	r24, 0x02	; 2
 5de:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <joystickMovement>
				outgoingByte = outgoingByte | joystickMovement;
 5e2:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <outgoingByte>
 5e6:	82 60       	ori	r24, 0x02	; 2
 5e8:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <outgoingByte>
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	08 95       	ret
			} else{
				LCD_DisplayString(1, "no input");
 5f2:	6c e8       	ldi	r22, 0x8C	; 140
 5f4:	71 e0       	ldi	r23, 0x01	; 1
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	8e de       	rcall	.-740    	; 0x316 <LCD_DisplayString>
				joystickMovement = 0x00;
 5fa:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <joystickMovement>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	90 e0       	ldi	r25, 0x00	; 0
				outgoingByte = outgoingByte | joystickMovement;
			}
			break;
	}
	return state;
}
 602:	08 95       	ret

00000604 <main>:
}

//End FSMs

int main(void)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	cd b7       	in	r28, 0x3d	; 61
 60a:	de b7       	in	r29, 0x3e	; 62
 60c:	2c 97       	sbiw	r28, 0x0c	; 12
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	f8 94       	cli
 612:	de bf       	out	0x3e, r29	; 62
 614:	0f be       	out	0x3f, r0	; 63
 616:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0x00; PORTA = 0xFF; //Inputs. Using A0 and A1 as inputs for 2-axis joystick
 618:	11 b8       	out	0x01, r1	; 1
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00; //LCD Display, output to PORTB
 61e:	84 b9       	out	0x04, r24	; 4
 620:	15 b8       	out	0x05, r1	; 5
	DDRC = 0x00; PORTC = 0xFF; //Inputs. Using C0-C5 as user input
 622:	17 b8       	out	0x07, r1	; 7
 624:	88 b9       	out	0x08, r24	; 8
	//DDRD = 0x03; PORTD = 0xFC; //Using D0 and D1 as outputs(control bus) and D2-D7 as inputs
	DDRD = 0x30; PORTD = 0xCF; //D4 and D5 are outputs(control bus). D0 - D3 are RXD0, TXD0, RXD1, and TXD1 (UART Functionality)
 626:	80 e3       	ldi	r24, 0x30	; 48
 628:	8a b9       	out	0x0a, r24	; 10
 62a:	8f ec       	ldi	r24, 0xCF	; 207
 62c:	8b b9       	out	0x0b, r24	; 11
 62e:	18 ec       	ldi	r17, 0xC8	; 200
 630:	00 e0       	ldi	r16, 0x00	; 0
 632:	f1 2c       	mov	r15, r1
 634:	e1 2c       	mov	r14, r1
 636:	54 ef       	ldi	r21, 0xF4	; 244
 638:	41 e0       	ldi	r20, 0x01	; 1
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	04 c0       	rjmp	.+8      	; 0x648 <main+0x44>
	unsigned long int c;
	while(1){
		c = a % b;
		if( c == 0 ) { return b; }
		a = b;
		b = c;
 640:	16 2f       	mov	r17, r22
 642:	07 2f       	mov	r16, r23
 644:	f8 2e       	mov	r15, r24
 646:	e9 2e       	mov	r14, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 648:	65 2f       	mov	r22, r21
 64a:	74 2f       	mov	r23, r20
 64c:	83 2f       	mov	r24, r19
 64e:	92 2f       	mov	r25, r18
 650:	21 2f       	mov	r18, r17
 652:	30 2f       	mov	r19, r16
 654:	4f 2d       	mov	r20, r15
 656:	5e 2d       	mov	r21, r14
 658:	7f d1       	rcall	.+766    	; 0x958 <__udivmodsi4>
 65a:	51 2f       	mov	r21, r17
 65c:	40 2f       	mov	r20, r16
 65e:	3f 2d       	mov	r19, r15
 660:	2e 2d       	mov	r18, r14
		if( c == 0 ) { return b; }
 662:	61 15       	cp	r22, r1
 664:	71 05       	cpc	r23, r1
 666:	81 05       	cpc	r24, r1
 668:	91 05       	cpc	r25, r1
 66a:	51 f7       	brne	.-44     	; 0x640 <main+0x3c>
 66c:	0f 2e       	mov	r0, r31
 66e:	f8 ec       	ldi	r31, 0xC8	; 200
 670:	bf 2e       	mov	r11, r31
 672:	f0 2d       	mov	r31, r0
 674:	a1 2c       	mov	r10, r1
 676:	91 2c       	mov	r9, r1
 678:	81 2c       	mov	r8, r1
 67a:	04 c0       	rjmp	.+8      	; 0x684 <main+0x80>
		a = b;
		b = c;
 67c:	b6 2e       	mov	r11, r22
 67e:	a7 2e       	mov	r10, r23
 680:	98 2e       	mov	r9, r24
 682:	89 2e       	mov	r8, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 684:	61 2f       	mov	r22, r17
 686:	70 2f       	mov	r23, r16
 688:	8f 2d       	mov	r24, r15
 68a:	9e 2d       	mov	r25, r14
 68c:	2b 2d       	mov	r18, r11
 68e:	3a 2d       	mov	r19, r10
 690:	49 2d       	mov	r20, r9
 692:	58 2d       	mov	r21, r8
 694:	61 d1       	rcall	.+706    	; 0x958 <__udivmodsi4>
 696:	1b 2d       	mov	r17, r11
 698:	0a 2d       	mov	r16, r10
 69a:	f9 2c       	mov	r15, r9
 69c:	e8 2c       	mov	r14, r8
		if( c == 0 ) { return b; }
 69e:	61 15       	cp	r22, r1
 6a0:	71 05       	cpc	r23, r1
 6a2:	81 05       	cpc	r24, r1
 6a4:	91 05       	cpc	r25, r1
 6a6:	51 f7       	brne	.-44     	; 0x67c <main+0x78>
 6a8:	18 ec       	ldi	r17, 0xC8	; 200
 6aa:	00 e0       	ldi	r16, 0x00	; 0
 6ac:	f1 2c       	mov	r15, r1
 6ae:	e1 2c       	mov	r14, r1
 6b0:	04 c0       	rjmp	.+8      	; 0x6ba <main+0xb6>
		a = b;
		b = c;
 6b2:	16 2f       	mov	r17, r22
 6b4:	07 2f       	mov	r16, r23
 6b6:	f8 2e       	mov	r15, r24
 6b8:	e9 2e       	mov	r14, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 6ba:	6b 2d       	mov	r22, r11
 6bc:	7a 2d       	mov	r23, r10
 6be:	89 2d       	mov	r24, r9
 6c0:	98 2d       	mov	r25, r8
 6c2:	21 2f       	mov	r18, r17
 6c4:	30 2f       	mov	r19, r16
 6c6:	4f 2d       	mov	r20, r15
 6c8:	5e 2d       	mov	r21, r14
 6ca:	46 d1       	rcall	.+652    	; 0x958 <__udivmodsi4>
 6cc:	b1 2e       	mov	r11, r17
 6ce:	a0 2e       	mov	r10, r16
 6d0:	9f 2c       	mov	r9, r15
 6d2:	8e 2c       	mov	r8, r14
		if( c == 0 ) { return b; }
 6d4:	61 15       	cp	r22, r1
 6d6:	71 05       	cpc	r23, r1
 6d8:	81 05       	cpc	r24, r1
 6da:	91 05       	cpc	r25, r1
 6dc:	51 f7       	brne	.-44     	; 0x6b2 <main+0xae>
 6de:	0f 2e       	mov	r0, r31
 6e0:	f8 ec       	ldi	r31, 0xC8	; 200
 6e2:	bf 2e       	mov	r11, r31
 6e4:	f0 2d       	mov	r31, r0
 6e6:	a1 2c       	mov	r10, r1
 6e8:	91 2c       	mov	r9, r1
 6ea:	81 2c       	mov	r8, r1
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <main+0xf2>
		a = b;
		b = c;
 6ee:	b6 2e       	mov	r11, r22
 6f0:	a7 2e       	mov	r10, r23
 6f2:	98 2e       	mov	r9, r24
 6f4:	89 2e       	mov	r8, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 6f6:	61 2f       	mov	r22, r17
 6f8:	70 2f       	mov	r23, r16
 6fa:	8f 2d       	mov	r24, r15
 6fc:	9e 2d       	mov	r25, r14
 6fe:	2b 2d       	mov	r18, r11
 700:	3a 2d       	mov	r19, r10
 702:	49 2d       	mov	r20, r9
 704:	58 2d       	mov	r21, r8
 706:	28 d1       	rcall	.+592    	; 0x958 <__udivmodsi4>
 708:	1b 2d       	mov	r17, r11
 70a:	0a 2d       	mov	r16, r10
 70c:	f9 2c       	mov	r15, r9
 70e:	e8 2c       	mov	r14, r8
		if( c == 0 ) { return b; }
 710:	61 15       	cp	r22, r1
 712:	71 05       	cpc	r23, r1
 714:	81 05       	cpc	r24, r1
 716:	91 05       	cpc	r25, r1
 718:	51 f7       	brne	.-44     	; 0x6ee <main+0xea>
 71a:	0f 2e       	mov	r0, r31
 71c:	f4 e6       	ldi	r31, 0x64	; 100
 71e:	ef 2e       	mov	r14, r31
 720:	f0 2d       	mov	r31, r0
 722:	f1 2c       	mov	r15, r1
 724:	00 e0       	ldi	r16, 0x00	; 0
 726:	10 e0       	ldi	r17, 0x00	; 0
 728:	04 c0       	rjmp	.+8      	; 0x732 <main+0x12e>
		a = b;
		b = c;
 72a:	e6 2e       	mov	r14, r22
 72c:	f7 2e       	mov	r15, r23
 72e:	08 2f       	mov	r16, r24
 730:	19 2f       	mov	r17, r25
//Returns: GCD else 0
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a % b;
 732:	6b 2d       	mov	r22, r11
 734:	7a 2d       	mov	r23, r10
 736:	89 2d       	mov	r24, r9
 738:	98 2d       	mov	r25, r8
 73a:	2e 2d       	mov	r18, r14
 73c:	3f 2d       	mov	r19, r15
 73e:	40 2f       	mov	r20, r16
 740:	51 2f       	mov	r21, r17
 742:	0a d1       	rcall	.+532    	; 0x958 <__udivmodsi4>
 744:	be 2c       	mov	r11, r14
 746:	af 2c       	mov	r10, r15
 748:	90 2e       	mov	r9, r16
 74a:	81 2e       	mov	r8, r17
		if( c == 0 ) { return b; }
 74c:	61 15       	cp	r22, r1
 74e:	71 05       	cpc	r23, r1
 750:	81 05       	cpc	r24, r1
 752:	91 05       	cpc	r25, r1
 754:	51 f7       	brne	.-44     	; 0x72a <main+0x126>

	//Greatest common divisor for all tasks or smallest time unit for tasks.
	unsigned long int GCD = tmpGCD;

	//Recalculate GCD periods for scheduler
	unsigned long int LCDTick_period = LCDTick_calc/GCD;
 756:	64 ef       	ldi	r22, 0xF4	; 244
 758:	71 e0       	ldi	r23, 0x01	; 1
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	2e 2d       	mov	r18, r14
 760:	3f 2d       	mov	r19, r15
 762:	40 2f       	mov	r20, r16
 764:	51 2f       	mov	r21, r17
 766:	f8 d0       	rcall	.+496    	; 0x958 <__udivmodsi4>
 768:	29 01       	movw	r4, r18
 76a:	3a 01       	movw	r6, r20
	unsigned long int ADCTick_period = ADCTick_calc/GCD;
 76c:	68 ec       	ldi	r22, 0xC8	; 200
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	2e 2d       	mov	r18, r14
 776:	3f 2d       	mov	r19, r15
 778:	40 2f       	mov	r20, r16
 77a:	51 2f       	mov	r21, r17
 77c:	ed d0       	rcall	.+474    	; 0x958 <__udivmodsi4>
 77e:	49 01       	movw	r8, r18
 780:	5a 01       	movw	r10, r20
	unsigned long int sNpTick_period = sNpTick_calc/GCD;
	unsigned long int placeTurretTick_period = placeTurretTick_calc/GCD;
	unsigned long int selTurTick_period = selTurTick_calc/GCD;
	unsigned long int usartSMTick_period = usartSMTick_calc/GCD;
 782:	64 e6       	ldi	r22, 0x64	; 100
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	2e 2d       	mov	r18, r14
 78c:	3f 2d       	mov	r19, r15
 78e:	40 2f       	mov	r20, r16
 790:	51 2f       	mov	r21, r17
 792:	e2 d0       	rcall	.+452    	; 0x958 <__udivmodsi4>

	//Declare an array of tasks
	static task task1, task2, task3, task4, task5, task6;
	task *tasks[] = { &task1, &task2 ,&task3, &task4, &task5, &task6};
 794:	8c e0       	ldi	r24, 0x0C	; 12
 796:	e5 e6       	ldi	r30, 0x65	; 101
 798:	f1 e0       	ldi	r31, 0x01	; 1
 79a:	de 01       	movw	r26, r28
 79c:	11 96       	adiw	r26, 0x01	; 1
 79e:	01 90       	ld	r0, Z+
 7a0:	0d 92       	st	X+, r0
 7a2:	8a 95       	dec	r24
 7a4:	e1 f7       	brne	.-8      	; 0x79e <main+0x19a>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = LCD_initialize;//Task initial state.
 7a6:	e7 ee       	ldi	r30, 0xE7	; 231
 7a8:	f1 e0       	ldi	r31, 0x01	; 1
 7aa:	10 82       	st	Z, r1
	task1.period = LCDTick_period;//Task Period.
 7ac:	41 82       	std	Z+1, r4	; 0x01
 7ae:	52 82       	std	Z+2, r5	; 0x02
 7b0:	63 82       	std	Z+3, r6	; 0x03
 7b2:	74 82       	std	Z+4, r7	; 0x04
	task1.elapsedTime = LCDTick_period;//Task current elapsed time.
 7b4:	45 82       	std	Z+5, r4	; 0x05
 7b6:	56 82       	std	Z+6, r5	; 0x06
 7b8:	67 82       	std	Z+7, r6	; 0x07
 7ba:	70 86       	std	Z+8, r7	; 0x08
	task1.TickFct = &LCDTick;//Function pointer for the tick.
 7bc:	8f ef       	ldi	r24, 0xFF	; 255
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	92 87       	std	Z+10, r25	; 0x0a
 7c2:	81 87       	std	Z+9, r24	; 0x09

	// Task 2
	task2.state = ADC_initialize;
 7c4:	ec ed       	ldi	r30, 0xDC	; 220
 7c6:	f1 e0       	ldi	r31, 0x01	; 1
 7c8:	10 82       	st	Z, r1
	task2.period = ADCTick_period;
 7ca:	81 82       	std	Z+1, r8	; 0x01
 7cc:	92 82       	std	Z+2, r9	; 0x02
 7ce:	a3 82       	std	Z+3, r10	; 0x03
 7d0:	b4 82       	std	Z+4, r11	; 0x04
	task2.elapsedTime = ADCTick_period;
 7d2:	85 82       	std	Z+5, r8	; 0x05
 7d4:	96 82       	std	Z+6, r9	; 0x06
 7d6:	a7 82       	std	Z+7, r10	; 0x07
 7d8:	b0 86       	std	Z+8, r11	; 0x08
	task2.TickFct = &ADCTick;
 7da:	8f e8       	ldi	r24, 0x8F	; 143
 7dc:	92 e0       	ldi	r25, 0x02	; 2
 7de:	92 87       	std	Z+10, r25	; 0x0a
 7e0:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 3
	task3.state = sNp_init;
 7e2:	e1 ed       	ldi	r30, 0xD1	; 209
 7e4:	f1 e0       	ldi	r31, 0x01	; 1
 7e6:	10 82       	st	Z, r1
	task3.period = sNpTick_period;
 7e8:	81 82       	std	Z+1, r8	; 0x01
 7ea:	92 82       	std	Z+2, r9	; 0x02
 7ec:	a3 82       	std	Z+3, r10	; 0x03
 7ee:	b4 82       	std	Z+4, r11	; 0x04
	task3.elapsedTime = sNpTick_period;
 7f0:	85 82       	std	Z+5, r8	; 0x05
 7f2:	96 82       	std	Z+6, r9	; 0x06
 7f4:	a7 82       	std	Z+7, r10	; 0x07
 7f6:	b0 86       	std	Z+8, r11	; 0x08
	task3.TickFct = &sNpTick;
 7f8:	8c e6       	ldi	r24, 0x6C	; 108
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	92 87       	std	Z+10, r25	; 0x0a
 7fe:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 4
	task4.state = placeTurret_init;
 800:	e6 ec       	ldi	r30, 0xC6	; 198
 802:	f1 e0       	ldi	r31, 0x01	; 1
 804:	10 82       	st	Z, r1
	task4.period = placeTurretTick_period;
 806:	81 82       	std	Z+1, r8	; 0x01
 808:	92 82       	std	Z+2, r9	; 0x02
 80a:	a3 82       	std	Z+3, r10	; 0x03
 80c:	b4 82       	std	Z+4, r11	; 0x04
	task4.elapsedTime = placeTurretTick_period;
 80e:	85 82       	std	Z+5, r8	; 0x05
 810:	96 82       	std	Z+6, r9	; 0x06
 812:	a7 82       	std	Z+7, r10	; 0x07
 814:	b0 86       	std	Z+8, r11	; 0x08
	task4.TickFct = &placeTurretTick;
 816:	8c e9       	ldi	r24, 0x9C	; 156
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	92 87       	std	Z+10, r25	; 0x0a
 81c:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 5
	task5.state = selTur_init;
 81e:	eb eb       	ldi	r30, 0xBB	; 187
 820:	f1 e0       	ldi	r31, 0x01	; 1
 822:	10 82       	st	Z, r1
	task5.period = selTurTick_period;
 824:	81 82       	std	Z+1, r8	; 0x01
 826:	92 82       	std	Z+2, r9	; 0x02
 828:	a3 82       	std	Z+3, r10	; 0x03
 82a:	b4 82       	std	Z+4, r11	; 0x04
	task5.elapsedTime = selTurTick_period;
 82c:	85 82       	std	Z+5, r8	; 0x05
 82e:	96 82       	std	Z+6, r9	; 0x06
 830:	a7 82       	std	Z+7, r10	; 0x07
 832:	b0 86       	std	Z+8, r11	; 0x08
	task5.TickFct = &selTurTick;
 834:	8e eb       	ldi	r24, 0xBE	; 190
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	92 87       	std	Z+10, r25	; 0x0a
 83a:	81 87       	std	Z+9, r24	; 0x09
	
	//Task 6
	task6.state = usartSM_init;
 83c:	e0 eb       	ldi	r30, 0xB0	; 176
 83e:	f1 e0       	ldi	r31, 0x01	; 1
 840:	10 82       	st	Z, r1
	task6.period = usartSMTick_period;
 842:	21 83       	std	Z+1, r18	; 0x01
 844:	32 83       	std	Z+2, r19	; 0x02
 846:	43 83       	std	Z+3, r20	; 0x03
 848:	54 83       	std	Z+4, r21	; 0x04
	task6.elapsedTime = usartSMTick_period;
 84a:	25 83       	std	Z+5, r18	; 0x05
 84c:	36 83       	std	Z+6, r19	; 0x06
 84e:	47 83       	std	Z+7, r20	; 0x07
 850:	50 87       	std	Z+8, r21	; 0x08
	task6.TickFct = &usartSMTick;
 852:	89 e5       	ldi	r24, 0x59	; 89
 854:	92 e0       	ldi	r25, 0x02	; 2
 856:	92 87       	std	Z+10, r25	; 0x0a
 858:	81 87       	std	Z+9, r24	; 0x09
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1ms
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 85a:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_avr_timer_M>
 85e:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_avr_timer_M+0x1>
 862:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <_avr_timer_M+0x2>
 866:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 86a:	e0 92 f5 01 	sts	0x01F5, r14	; 0x8001f5 <_avr_timer_cntcurr>
 86e:	f0 92 f6 01 	sts	0x01F6, r15	; 0x8001f6 <_avr_timer_cntcurr+0x1>
 872:	00 93 f7 01 	sts	0x01F7, r16	; 0x8001f7 <_avr_timer_cntcurr+0x2>
 876:	10 93 f8 01 	sts	0x01F8, r17	; 0x8001f8 <_avr_timer_cntcurr+0x3>
	
	TimerSet(GCD);
	TimerOn();
 87a:	66 dd       	rcall	.-1332   	; 0x348 <TimerOn>
	LCD_init();
 87c:	34 dd       	rcall	.-1432   	; 0x2e6 <LCD_init>
	//LCD_DisplayString(1, playerInfo);
	InitADC();
 87e:	2f de       	rcall	.-930    	; 0x4de <InitADC>
	initUSART(0);
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	c2 dd       	rcall	.-1148   	; 0x408 <initUSART>
	USART_Flush(0);
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	e2 dd       	rcall	.-1084   	; 0x44c <USART_Flush>
	enemy *enemy[] = {};
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		A2 = ~PINA & 0x04;
		C0 = ~PINC & 0x01; //Start/Pause button
 888:	99 24       	eor	r9, r9
 88a:	93 94       	inc	r9
 88c:	5e 01       	movw	r10, r28
 88e:	8d e0       	ldi	r24, 0x0D	; 13
 890:	a8 0e       	add	r10, r24
 892:	b1 1c       	adc	r11, r1
		//If enemy makes it to the end of the map, take away from user health.
	enemy *enemy[] = {};
	
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		A2 = ~PINA & 0x04;
 894:	80 b1       	in	r24, 0x00	; 0
 896:	80 95       	com	r24
 898:	84 70       	andi	r24, 0x04	; 4
 89a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <A2>
		C0 = ~PINC & 0x01; //Start/Pause button
 89e:	86 b1       	in	r24, 0x06	; 6
 8a0:	89 25       	eor	r24, r9
 8a2:	81 70       	andi	r24, 0x01	; 1
 8a4:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <C0>
		C1 = ~PINC & 0x02; //Place turret button
 8a8:	86 b1       	in	r24, 0x06	; 6
 8aa:	80 95       	com	r24
 8ac:	82 70       	andi	r24, 0x02	; 2
 8ae:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <C1>
		C2 = ~PINC & 0x04; //Select "blue" turret //Best turret
 8b2:	86 b1       	in	r24, 0x06	; 6
 8b4:	80 95       	com	r24
 8b6:	84 70       	andi	r24, 0x04	; 4
 8b8:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <C2>
		C3 = ~PINC & 0x08; //Select "purple" turret //Second best turret
 8bc:	86 b1       	in	r24, 0x06	; 6
 8be:	80 95       	com	r24
 8c0:	88 70       	andi	r24, 0x08	; 8
 8c2:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <C3>
		C4 = ~PINC & 0x10; //Select "green" turret //Third best turret
 8c6:	86 b1       	in	r24, 0x06	; 6
 8c8:	80 95       	com	r24
 8ca:	80 71       	andi	r24, 0x10	; 16
 8cc:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <C4>
		C5 = ~PINC & 0x20; //Reset
 8d0:	86 b1       	in	r24, 0x06	; 6
 8d2:	80 95       	com	r24
 8d4:	80 72       	andi	r24, 0x20	; 32
 8d6:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <C5>
 8da:	de 01       	movw	r26, r28
 8dc:	11 96       	adiw	r26, 0x01	; 1
 8de:	7d 01       	movw	r14, r26

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 8e0:	f7 01       	movw	r30, r14
 8e2:	01 91       	ld	r16, Z+
 8e4:	11 91       	ld	r17, Z+
 8e6:	7f 01       	movw	r14, r30
 8e8:	d8 01       	movw	r26, r16
 8ea:	15 96       	adiw	r26, 0x05	; 5
 8ec:	4d 91       	ld	r20, X+
 8ee:	5d 91       	ld	r21, X+
 8f0:	6d 91       	ld	r22, X+
 8f2:	7c 91       	ld	r23, X
 8f4:	18 97       	sbiw	r26, 0x08	; 8
 8f6:	11 96       	adiw	r26, 0x01	; 1
 8f8:	8d 91       	ld	r24, X+
 8fa:	9d 91       	ld	r25, X+
 8fc:	0d 90       	ld	r0, X+
 8fe:	bc 91       	ld	r27, X
 900:	a0 2d       	mov	r26, r0
 902:	48 17       	cp	r20, r24
 904:	59 07       	cpc	r21, r25
 906:	6a 07       	cpc	r22, r26
 908:	7b 07       	cpc	r23, r27
 90a:	81 f4       	brne	.+32     	; 0x92c <main+0x328>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 90c:	f8 01       	movw	r30, r16
 90e:	80 81       	ld	r24, Z
 910:	01 84       	ldd	r0, Z+9	; 0x09
 912:	f2 85       	ldd	r31, Z+10	; 0x0a
 914:	e0 2d       	mov	r30, r0
 916:	08 2e       	mov	r0, r24
 918:	00 0c       	add	r0, r0
 91a:	99 0b       	sbc	r25, r25
 91c:	09 95       	icall
 91e:	d8 01       	movw	r26, r16
 920:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 922:	f8 01       	movw	r30, r16
 924:	15 82       	std	Z+5, r1	; 0x05
 926:	16 82       	std	Z+6, r1	; 0x06
 928:	17 82       	std	Z+7, r1	; 0x07
 92a:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 92c:	f8 01       	movw	r30, r16
 92e:	85 81       	ldd	r24, Z+5	; 0x05
 930:	96 81       	ldd	r25, Z+6	; 0x06
 932:	a7 81       	ldd	r26, Z+7	; 0x07
 934:	b0 85       	ldd	r27, Z+8	; 0x08
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	a1 1d       	adc	r26, r1
 93a:	b1 1d       	adc	r27, r1
 93c:	85 83       	std	Z+5, r24	; 0x05
 93e:	96 83       	std	Z+6, r25	; 0x06
 940:	a7 83       	std	Z+7, r26	; 0x07
 942:	b0 87       	std	Z+8, r27	; 0x08
		C3 = ~PINC & 0x08; //Select "purple" turret //Second best turret
		C4 = ~PINC & 0x10; //Select "green" turret //Third best turret
		C5 = ~PINC & 0x20; //Reset

		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 944:	ea 14       	cp	r14, r10
 946:	fb 04       	cpc	r15, r11
 948:	59 f6       	brne	.-106    	; 0x8e0 <main+0x2dc>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 94a:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <TimerFlag>
 94e:	88 23       	and	r24, r24
 950:	e1 f3       	breq	.-8      	; 0x94a <main+0x346>
		TimerFlag = 0;
 952:	10 92 f9 01 	sts	0x01F9, r1	; 0x8001f9 <TimerFlag>
	}
 956:	9e cf       	rjmp	.-196    	; 0x894 <main+0x290>

00000958 <__udivmodsi4>:
 958:	a1 e2       	ldi	r26, 0x21	; 33
 95a:	1a 2e       	mov	r1, r26
 95c:	aa 1b       	sub	r26, r26
 95e:	bb 1b       	sub	r27, r27
 960:	fd 01       	movw	r30, r26
 962:	0d c0       	rjmp	.+26     	; 0x97e <__udivmodsi4_ep>

00000964 <__udivmodsi4_loop>:
 964:	aa 1f       	adc	r26, r26
 966:	bb 1f       	adc	r27, r27
 968:	ee 1f       	adc	r30, r30
 96a:	ff 1f       	adc	r31, r31
 96c:	a2 17       	cp	r26, r18
 96e:	b3 07       	cpc	r27, r19
 970:	e4 07       	cpc	r30, r20
 972:	f5 07       	cpc	r31, r21
 974:	20 f0       	brcs	.+8      	; 0x97e <__udivmodsi4_ep>
 976:	a2 1b       	sub	r26, r18
 978:	b3 0b       	sbc	r27, r19
 97a:	e4 0b       	sbc	r30, r20
 97c:	f5 0b       	sbc	r31, r21

0000097e <__udivmodsi4_ep>:
 97e:	66 1f       	adc	r22, r22
 980:	77 1f       	adc	r23, r23
 982:	88 1f       	adc	r24, r24
 984:	99 1f       	adc	r25, r25
 986:	1a 94       	dec	r1
 988:	69 f7       	brne	.-38     	; 0x964 <__udivmodsi4_loop>
 98a:	60 95       	com	r22
 98c:	70 95       	com	r23
 98e:	80 95       	com	r24
 990:	90 95       	com	r25
 992:	9b 01       	movw	r18, r22
 994:	ac 01       	movw	r20, r24
 996:	bd 01       	movw	r22, r26
 998:	cf 01       	movw	r24, r30
 99a:	08 95       	ret

0000099c <__tablejump2__>:
 99c:	ee 0f       	add	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	00 24       	eor	r0, r0
 9a2:	00 1c       	adc	r0, r0
 9a4:	0b be       	out	0x3b, r0	; 59
 9a6:	07 90       	elpm	r0, Z+
 9a8:	f6 91       	elpm	r31, Z
 9aa:	e0 2d       	mov	r30, r0
 9ac:	09 94       	ijmp

000009ae <_exit>:
 9ae:	f8 94       	cli

000009b0 <__stop_program>:
 9b0:	ff cf       	rjmp	.-2      	; 0x9b0 <__stop_program>
